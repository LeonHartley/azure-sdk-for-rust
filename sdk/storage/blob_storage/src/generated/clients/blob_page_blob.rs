// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use crate::models::{PageList, PremiumPageBlobAccessTier, SequenceNumberActionType};
use azure_core::builders::ClientMethodOptionsBuilder;
use azure_core::{
    AsClientMethodOptions, ClientMethodOptions, Context, Method, Pipeline, Request, RequestContent,
    Response, Result, Url,
};
use time::OffsetDateTime;

pub struct BlobPageBlob {
    pub(in crate::generated::clients) endpoint: Url,
    pub(in crate::generated::clients) pipeline: Pipeline,
}

impl BlobPageBlob {
    /// The Clear Pages operation clears a range of pages from a page blob
    pub async fn clear_pages(
        &self,
        container_name: impl Into<String>,
        blob: impl Into<String>,
        content_length: i64,
        version: impl Into<String>,
        options: Option<BlobPageBlobClearPagesOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}/{blob}?comp=page&clear");
        path = path.replace("{blob}", &blob.into());
        path = path.replace("{containerName}", &container_name.into());
        url.set_path(&path);
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        request.insert_header("content-length", content_length.to_string());
        if let Some(if_match) = options.if_match {
            request.insert_header("if-match", if_match);
        }
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", if_modified_since.to_string());
        }
        if let Some(if_none_match) = options.if_none_match {
            request.insert_header("if-none-match", if_none_match);
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", if_unmodified_since.to_string());
        }
        if let Some(request_id) = options.request_id {
            request.insert_header("x-ms-client-request-id", request_id);
        }
        if let Some(if_sequence_number_equal_to) = options.if_sequence_number_equal_to {
            request.insert_header(
                "x-ms-if-sequence-number-eq",
                if_sequence_number_equal_to.to_string(),
            );
        }
        if let Some(if_sequence_number_less_than_or_equal_to) =
            options.if_sequence_number_less_than_or_equal_to
        {
            request.insert_header(
                "x-ms-if-sequence-number-le",
                if_sequence_number_less_than_or_equal_to.to_string(),
            );
        }
        if let Some(if_sequence_number_less_than) = options.if_sequence_number_less_than {
            request.insert_header(
                "x-ms-if-sequence-number-lt",
                if_sequence_number_less_than.to_string(),
            );
        }
        if let Some(if_tags) = options.if_tags {
            request.insert_header("x-ms-if-tags", if_tags);
        }
        if let Some(lease_id) = options.lease_id {
            request.insert_header("x-ms-lease-id", lease_id);
        }
        if let Some(range) = options.range {
            request.insert_header("x-ms-range", range);
        }
        request.insert_header("x-ms-version", version.into());
        self.pipeline.send(&mut ctx, &mut request).await
    }

    /// The Copy Incremental operation copies a snapshot of the source page blob to a destination page blob. The snapshot is copied
    /// such that only the differential changes between the previously copied snapshot are transferred to the destination. The
    /// copied snapshots are complete copies of the original snapshot and can be read or copied from as usual. This API is supported
    /// since REST version 2016-05-31.
    pub async fn copy_incremental(
        &self,
        container_name: impl Into<String>,
        blob: impl Into<String>,
        copy_source: impl Into<String>,
        version: impl Into<String>,
        options: Option<BlobPageBlobCopyIncrementalOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}/{blob}?comp=incrementalcopy");
        path = path.replace("{blob}", &blob.into());
        path = path.replace("{containerName}", &container_name.into());
        url.set_path(&path);
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        if let Some(if_match) = options.if_match {
            request.insert_header("if-match", if_match);
        }
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", if_modified_since.to_string());
        }
        if let Some(if_none_match) = options.if_none_match {
            request.insert_header("if-none-match", if_none_match);
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", if_unmodified_since.to_string());
        }
        if let Some(request_id) = options.request_id {
            request.insert_header("x-ms-client-request-id", request_id);
        }
        request.insert_header("x-ms-copy-source", copy_source.into());
        if let Some(if_tags) = options.if_tags {
            request.insert_header("x-ms-if-tags", if_tags);
        }
        if let Some(lease_id) = options.lease_id {
            request.insert_header("x-ms-lease-id", lease_id);
        }
        request.insert_header("x-ms-version", version.into());
        self.pipeline.send(&mut ctx, &mut request).await
    }

    /// The Create operation creates a new page blob.
    pub async fn create(
        &self,
        container_name: impl Into<String>,
        blob: impl Into<String>,
        content_length: i64,
        blob_content_length: i64,
        version: impl Into<String>,
        options: Option<BlobPageBlobCreateOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}/{blob}?PageBlob");
        path = path.replace("{blob}", &blob.into());
        path = path.replace("{containerName}", &container_name.into());
        url.set_path(&path);
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        request.insert_header("content-length", content_length.to_string());
        if let Some(if_match) = options.if_match {
            request.insert_header("if-match", if_match);
        }
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", if_modified_since.to_string());
        }
        if let Some(if_none_match) = options.if_none_match {
            request.insert_header("if-none-match", if_none_match);
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", if_unmodified_since.to_string());
        }
        if let Some(access_tier) = options.access_tier {
            request.insert_header("x-ms-access-tier", access_tier.to_string());
        }
        if let Some(blob_cache_control) = options.blob_cache_control {
            request.insert_header("x-ms-blob-cache-control", blob_cache_control);
        }
        if let Some(blob_content_disposition) = options.blob_content_disposition {
            request.insert_header("x-ms-blob-content-disposition", blob_content_disposition);
        }
        if let Some(blob_content_encoding) = options.blob_content_encoding {
            request.insert_header("x-ms-blob-content-encoding", blob_content_encoding);
        }
        if let Some(blob_content_language) = options.blob_content_language {
            request.insert_header("x-ms-blob-content-language", blob_content_language);
        }
        request.insert_header("x-ms-blob-content-length", blob_content_length.to_string());
        if let Some(blob_content_md5) = options.blob_content_md5 {
            request.insert_header("x-ms-blob-content-md5", blob_content_md5);
        }
        if let Some(blob_content_type) = options.blob_content_type {
            request.insert_header("x-ms-blob-content-type", blob_content_type);
        }
        if let Some(blob_sequence_number) = options.blob_sequence_number {
            request.insert_header(
                "x-ms-blob-sequence-number",
                blob_sequence_number.to_string(),
            );
        }
        if let Some(request_id) = options.request_id {
            request.insert_header("x-ms-client-request-id", request_id);
        }
        if let Some(encryption_algorithm) = options.encryption_algorithm {
            request.insert_header("x-ms-encryption-algorithm", encryption_algorithm);
        }
        if let Some(encryption_key) = options.encryption_key {
            request.insert_header("x-ms-encryption-key", encryption_key);
        }
        if let Some(encryption_key_sha256) = options.encryption_key_sha256 {
            request.insert_header("x-ms-encryption-key-sha256", encryption_key_sha256);
        }
        if let Some(encryption_scope) = options.encryption_scope {
            request.insert_header("x-ms-encryption-scope", encryption_scope);
        }
        if let Some(if_tags) = options.if_tags {
            request.insert_header("x-ms-if-tags", if_tags);
        }
        if let Some(immutability_policy_expiry) = options.immutability_policy_expiry {
            request.insert_header(
                "x-ms-immutability-policy-until-date",
                immutability_policy_expiry,
            );
        }
        if let Some(lease_id) = options.lease_id {
            request.insert_header("x-ms-lease-id", lease_id);
        }
        if let Some(legal_hold) = options.legal_hold {
            request.insert_header("x-ms-legal-hold", legal_hold.to_string());
        }
        if let Some(blob_tags_string) = options.blob_tags_string {
            request.insert_header("x-ms-tags", blob_tags_string);
        }
        request.insert_header("x-ms-version", version.into());
        self.pipeline.send(&mut ctx, &mut request).await
    }

    /// The Get Page Ranges operation returns the list of valid page ranges for a page blob or snapshot of a page blob.
    pub async fn get_page_ranges(
        &self,
        container_name: impl Into<String>,
        blob: impl Into<String>,
        version: impl Into<String>,
        options: Option<BlobPageBlobGetPageRangesOptions<'_>>,
    ) -> Result<Response<PageList>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}/{blob}?comp=pagelist");
        path = path.replace("{blob}", &blob.into());
        path = path.replace("{containerName}", &container_name.into());
        url.set_path(&path);
        if let Some(marker) = options.marker {
            url.query_pairs_mut().append_pair("marker", &marker);
        }
        if let Some(maxresults) = options.maxresults {
            url.query_pairs_mut()
                .append_pair("maxresults", &maxresults.to_string());
        }
        if let Some(snapshot) = options.snapshot {
            url.query_pairs_mut().append_pair("snapshot", &snapshot);
        }
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/json");
        if let Some(if_match) = options.if_match {
            request.insert_header("if-match", if_match);
        }
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", if_modified_since.to_string());
        }
        if let Some(if_none_match) = options.if_none_match {
            request.insert_header("if-none-match", if_none_match);
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", if_unmodified_since.to_string());
        }
        if let Some(request_id) = options.request_id {
            request.insert_header("x-ms-client-request-id", request_id);
        }
        if let Some(if_tags) = options.if_tags {
            request.insert_header("x-ms-if-tags", if_tags);
        }
        if let Some(lease_id) = options.lease_id {
            request.insert_header("x-ms-lease-id", lease_id);
        }
        if let Some(range) = options.range {
            request.insert_header("x-ms-range", range);
        }
        request.insert_header("x-ms-version", version.into());
        self.pipeline.send(&mut ctx, &mut request).await
    }

    /// The Get Page Ranges Diff operation returns the list of valid page ranges for a page blob or snapshot of a page blob.
    pub async fn get_page_ranges_diff(
        &self,
        container_name: impl Into<String>,
        blob: impl Into<String>,
        prevsnapshot: impl Into<String>,
        prev_snapshot_url: impl Into<String>,
        version: impl Into<String>,
        options: Option<BlobPageBlobGetPageRangesDiffOptions<'_>>,
    ) -> Result<Response<PageList>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}/{blob}?comp=pagelist&diff");
        path = path.replace("{blob}", &blob.into());
        path = path.replace("{containerName}", &container_name.into());
        url.set_path(&path);
        if let Some(marker) = options.marker {
            url.query_pairs_mut().append_pair("marker", &marker);
        }
        if let Some(maxresults) = options.maxresults {
            url.query_pairs_mut()
                .append_pair("maxresults", &maxresults.to_string());
        }
        url.query_pairs_mut()
            .append_pair("prevsnapshot", &prevsnapshot.into());
        if let Some(snapshot) = options.snapshot {
            url.query_pairs_mut().append_pair("snapshot", &snapshot);
        }
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/json");
        if let Some(if_match) = options.if_match {
            request.insert_header("if-match", if_match);
        }
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", if_modified_since.to_string());
        }
        if let Some(if_none_match) = options.if_none_match {
            request.insert_header("if-none-match", if_none_match);
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", if_unmodified_since.to_string());
        }
        if let Some(request_id) = options.request_id {
            request.insert_header("x-ms-client-request-id", request_id);
        }
        if let Some(if_tags) = options.if_tags {
            request.insert_header("x-ms-if-tags", if_tags);
        }
        if let Some(lease_id) = options.lease_id {
            request.insert_header("x-ms-lease-id", lease_id);
        }
        request.insert_header("x-ms-previous-snapshot-url", prev_snapshot_url.into());
        if let Some(range) = options.range {
            request.insert_header("x-ms-range", range);
        }
        request.insert_header("x-ms-version", version.into());
        self.pipeline.send(&mut ctx, &mut request).await
    }

    /// The Resize operation increases the size of the page blob to the specified size.
    pub async fn resize(
        &self,
        container_name: impl Into<String>,
        blob: impl Into<String>,
        blob_content_length: i64,
        version: impl Into<String>,
        options: Option<BlobPageBlobResizeOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}/{blob}?comp=properties&Resize");
        path = path.replace("{blob}", &blob.into());
        path = path.replace("{containerName}", &container_name.into());
        url.set_path(&path);
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        if let Some(if_match) = options.if_match {
            request.insert_header("if-match", if_match);
        }
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", if_modified_since.to_string());
        }
        if let Some(if_none_match) = options.if_none_match {
            request.insert_header("if-none-match", if_none_match);
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", if_unmodified_since.to_string());
        }
        request.insert_header("x-ms-blob-content-length", blob_content_length.to_string());
        if let Some(request_id) = options.request_id {
            request.insert_header("x-ms-client-request-id", request_id);
        }
        if let Some(encryption_algorithm) = options.encryption_algorithm {
            request.insert_header("x-ms-encryption-algorithm", encryption_algorithm);
        }
        if let Some(encryption_key) = options.encryption_key {
            request.insert_header("x-ms-encryption-key", encryption_key);
        }
        if let Some(encryption_key_sha256) = options.encryption_key_sha256 {
            request.insert_header("x-ms-encryption-key-sha256", encryption_key_sha256);
        }
        if let Some(encryption_scope) = options.encryption_scope {
            request.insert_header("x-ms-encryption-scope", encryption_scope);
        }
        if let Some(if_tags) = options.if_tags {
            request.insert_header("x-ms-if-tags", if_tags);
        }
        if let Some(lease_id) = options.lease_id {
            request.insert_header("x-ms-lease-id", lease_id);
        }
        request.insert_header("x-ms-version", version.into());
        self.pipeline.send(&mut ctx, &mut request).await
    }

    /// The Update Sequence Number operation sets the blob's sequence number. The operation will fail if the specified sequence
    /// number is less than the current sequence number of the blob.
    pub async fn update_sequence_number(
        &self,
        container_name: impl Into<String>,
        blob: impl Into<String>,
        sequence_number_action: SequenceNumberActionType,
        blob_sequence_number: i64,
        version: impl Into<String>,
        options: Option<BlobPageBlobUpdateSequenceNumberOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}/{blob}?comp=properties&UpdateSequenceNumber");
        path = path.replace("{blob}", &blob.into());
        path = path.replace("{containerName}", &container_name.into());
        url.set_path(&path);
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        if let Some(if_match) = options.if_match {
            request.insert_header("if-match", if_match);
        }
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", if_modified_since.to_string());
        }
        if let Some(if_none_match) = options.if_none_match {
            request.insert_header("if-none-match", if_none_match);
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", if_unmodified_since.to_string());
        }
        request.insert_header(
            "x-ms-blob-sequence-number",
            blob_sequence_number.to_string(),
        );
        if let Some(request_id) = options.request_id {
            request.insert_header("x-ms-client-request-id", request_id);
        }
        if let Some(if_tags) = options.if_tags {
            request.insert_header("x-ms-if-tags", if_tags);
        }
        if let Some(lease_id) = options.lease_id {
            request.insert_header("x-ms-lease-id", lease_id);
        }
        request.insert_header(
            "x-ms-sequence-number-action",
            sequence_number_action.to_string(),
        );
        request.insert_header("x-ms-version", version.into());
        self.pipeline.send(&mut ctx, &mut request).await
    }

    /// The Upload Pages operation writes a range of pages to a page blob
    pub async fn upload_pages(
        &self,
        body: RequestContent<Vec<u8>>,
        container_name: impl Into<String>,
        blob: impl Into<String>,
        content_length: i64,
        version: impl Into<String>,
        options: Option<BlobPageBlobUploadPagesOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}/{blob}?comp=page&update");
        path = path.replace("{blob}", &blob.into());
        path = path.replace("{containerName}", &container_name.into());
        url.set_path(&path);
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        request.insert_header("content-length", content_length.to_string());
        if let Some(transactional_content_md5) = options.transactional_content_md5 {
            request.insert_header("content-md5", transactional_content_md5);
        }
        request.insert_header("content-type", "application/json");
        if let Some(if_match) = options.if_match {
            request.insert_header("if-match", if_match);
        }
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", if_modified_since.to_string());
        }
        if let Some(if_none_match) = options.if_none_match {
            request.insert_header("if-none-match", if_none_match);
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", if_unmodified_since.to_string());
        }
        if let Some(request_id) = options.request_id {
            request.insert_header("x-ms-client-request-id", request_id);
        }
        if let Some(transactional_content_crc64) = options.transactional_content_crc64 {
            request.insert_header("x-ms-content-crc64", transactional_content_crc64);
        }
        if let Some(encryption_algorithm) = options.encryption_algorithm {
            request.insert_header("x-ms-encryption-algorithm", encryption_algorithm);
        }
        if let Some(encryption_key) = options.encryption_key {
            request.insert_header("x-ms-encryption-key", encryption_key);
        }
        if let Some(encryption_key_sha256) = options.encryption_key_sha256 {
            request.insert_header("x-ms-encryption-key-sha256", encryption_key_sha256);
        }
        if let Some(encryption_scope) = options.encryption_scope {
            request.insert_header("x-ms-encryption-scope", encryption_scope);
        }
        if let Some(if_sequence_number_equal_to) = options.if_sequence_number_equal_to {
            request.insert_header(
                "x-ms-if-sequence-number-eq",
                if_sequence_number_equal_to.to_string(),
            );
        }
        if let Some(if_sequence_number_less_than_or_equal_to) =
            options.if_sequence_number_less_than_or_equal_to
        {
            request.insert_header(
                "x-ms-if-sequence-number-le",
                if_sequence_number_less_than_or_equal_to.to_string(),
            );
        }
        if let Some(if_sequence_number_less_than) = options.if_sequence_number_less_than {
            request.insert_header(
                "x-ms-if-sequence-number-lt",
                if_sequence_number_less_than.to_string(),
            );
        }
        if let Some(if_tags) = options.if_tags {
            request.insert_header("x-ms-if-tags", if_tags);
        }
        if let Some(lease_id) = options.lease_id {
            request.insert_header("x-ms-lease-id", lease_id);
        }
        if let Some(range) = options.range {
            request.insert_header("x-ms-range", range);
        }
        request.insert_header("x-ms-version", version.into());
        request.set_body(body);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    /// The Upload Pages operation writes a range of pages to a page blob where the contents are read from a URL.
    pub async fn upload_pages_from_url(
        &self,
        container_name: impl Into<String>,
        blob: impl Into<String>,
        content_length: i64,
        source_url: impl Into<String>,
        source_range: impl Into<String>,
        range: impl Into<String>,
        version: impl Into<String>,
        options: Option<BlobPageBlobUploadPagesFromUrlOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}/{blob}?comp=page&update&fromUrl");
        path = path.replace("{blob}", &blob.into());
        path = path.replace("{containerName}", &container_name.into());
        url.set_path(&path);
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        request.insert_header("content-length", content_length.to_string());
        if let Some(if_match) = options.if_match {
            request.insert_header("if-match", if_match);
        }
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", if_modified_since.to_string());
        }
        if let Some(if_none_match) = options.if_none_match {
            request.insert_header("if-none-match", if_none_match);
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", if_unmodified_since.to_string());
        }
        if let Some(request_id) = options.request_id {
            request.insert_header("x-ms-client-request-id", request_id);
        }
        if let Some(copy_source_authorization) = options.copy_source_authorization {
            request.insert_header("x-ms-copy-source-authorization", copy_source_authorization);
        }
        if let Some(encryption_algorithm) = options.encryption_algorithm {
            request.insert_header("x-ms-encryption-algorithm", encryption_algorithm);
        }
        if let Some(encryption_key) = options.encryption_key {
            request.insert_header("x-ms-encryption-key", encryption_key);
        }
        if let Some(encryption_key_sha256) = options.encryption_key_sha256 {
            request.insert_header("x-ms-encryption-key-sha256", encryption_key_sha256);
        }
        if let Some(encryption_scope) = options.encryption_scope {
            request.insert_header("x-ms-encryption-scope", encryption_scope);
        }
        if let Some(if_sequence_number_equal_to) = options.if_sequence_number_equal_to {
            request.insert_header(
                "x-ms-if-sequence-number-eq",
                if_sequence_number_equal_to.to_string(),
            );
        }
        if let Some(if_sequence_number_less_than_or_equal_to) =
            options.if_sequence_number_less_than_or_equal_to
        {
            request.insert_header(
                "x-ms-if-sequence-number-le",
                if_sequence_number_less_than_or_equal_to.to_string(),
            );
        }
        if let Some(if_sequence_number_less_than) = options.if_sequence_number_less_than {
            request.insert_header(
                "x-ms-if-sequence-number-lt",
                if_sequence_number_less_than.to_string(),
            );
        }
        if let Some(if_tags) = options.if_tags {
            request.insert_header("x-ms-if-tags", if_tags);
        }
        if let Some(lease_id) = options.lease_id {
            request.insert_header("x-ms-lease-id", lease_id);
        }
        request.insert_header("x-ms-range", range.into());
        if let Some(source_content_crc64) = options.source_content_crc64 {
            request.insert_header("x-ms-source-content-crc64", source_content_crc64);
        }
        if let Some(source_content_md5) = options.source_content_md5 {
            request.insert_header("x-ms-source-content-md5", source_content_md5);
        }
        if let Some(source_if_match) = options.source_if_match {
            request.insert_header("x-ms-source-if-match", source_if_match);
        }
        if let Some(source_if_modified_since) = options.source_if_modified_since {
            request.insert_header(
                "x-ms-source-if-modified-since",
                source_if_modified_since.to_string(),
            );
        }
        if let Some(source_if_none_match) = options.source_if_none_match {
            request.insert_header("x-ms-source-if-none-match", source_if_none_match);
        }
        if let Some(source_if_unmodified_since) = options.source_if_unmodified_since {
            request.insert_header(
                "x-ms-source-if-unmodified-since",
                source_if_unmodified_since.to_string(),
            );
        }
        request.insert_header("x-ms-source-range", source_range.into());
        request.insert_header("x-ms-source-url", source_url.into());
        request.insert_header("x-ms-version", version.into());
        self.pipeline.send(&mut ctx, &mut request).await
    }
}

#[derive(Clone, Debug, Default)]
pub struct BlobPageBlobClearPagesOptions<'a> {
    if_match: Option<String>,
    if_modified_since: Option<OffsetDateTime>,
    if_none_match: Option<String>,
    if_sequence_number_equal_to: Option<i64>,
    if_sequence_number_less_than: Option<i64>,
    if_sequence_number_less_than_or_equal_to: Option<i64>,
    if_tags: Option<String>,
    if_unmodified_since: Option<OffsetDateTime>,
    lease_id: Option<String>,
    method_options: ClientMethodOptions<'a>,
    range: Option<String>,
    request_id: Option<String>,
    timeout: Option<i32>,
}

impl<'a> BlobPageBlobClearPagesOptions<'a> {
    pub fn builder() -> builders::BlobPageBlobClearPagesOptionsBuilder<'a> {
        builders::BlobPageBlobClearPagesOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct BlobPageBlobCopyIncrementalOptions<'a> {
    if_match: Option<String>,
    if_modified_since: Option<OffsetDateTime>,
    if_none_match: Option<String>,
    if_tags: Option<String>,
    if_unmodified_since: Option<OffsetDateTime>,
    lease_id: Option<String>,
    method_options: ClientMethodOptions<'a>,
    request_id: Option<String>,
    timeout: Option<i32>,
}

impl<'a> BlobPageBlobCopyIncrementalOptions<'a> {
    pub fn builder() -> builders::BlobPageBlobCopyIncrementalOptionsBuilder<'a> {
        builders::BlobPageBlobCopyIncrementalOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct BlobPageBlobCreateOptions<'a> {
    access_tier: Option<PremiumPageBlobAccessTier>,
    blob_cache_control: Option<String>,
    blob_content_disposition: Option<String>,
    blob_content_encoding: Option<String>,
    blob_content_language: Option<String>,
    blob_content_md5: Option<String>,
    blob_content_type: Option<String>,
    blob_sequence_number: Option<i64>,
    blob_tags_string: Option<String>,
    encryption_algorithm: Option<String>,
    encryption_key: Option<String>,
    encryption_key_sha256: Option<String>,
    encryption_scope: Option<String>,
    if_match: Option<String>,
    if_modified_since: Option<OffsetDateTime>,
    if_none_match: Option<String>,
    if_tags: Option<String>,
    if_unmodified_since: Option<OffsetDateTime>,
    immutability_policy_expiry: Option<String>,
    lease_id: Option<String>,
    legal_hold: Option<bool>,
    method_options: ClientMethodOptions<'a>,
    request_id: Option<String>,
    timeout: Option<i32>,
}

impl<'a> BlobPageBlobCreateOptions<'a> {
    pub fn builder() -> builders::BlobPageBlobCreateOptionsBuilder<'a> {
        builders::BlobPageBlobCreateOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct BlobPageBlobGetPageRangesOptions<'a> {
    if_match: Option<String>,
    if_modified_since: Option<OffsetDateTime>,
    if_none_match: Option<String>,
    if_tags: Option<String>,
    if_unmodified_since: Option<OffsetDateTime>,
    lease_id: Option<String>,
    marker: Option<String>,
    maxresults: Option<i32>,
    method_options: ClientMethodOptions<'a>,
    range: Option<String>,
    request_id: Option<String>,
    snapshot: Option<String>,
}

impl<'a> BlobPageBlobGetPageRangesOptions<'a> {
    pub fn builder() -> builders::BlobPageBlobGetPageRangesOptionsBuilder<'a> {
        builders::BlobPageBlobGetPageRangesOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct BlobPageBlobGetPageRangesDiffOptions<'a> {
    if_match: Option<String>,
    if_modified_since: Option<OffsetDateTime>,
    if_none_match: Option<String>,
    if_tags: Option<String>,
    if_unmodified_since: Option<OffsetDateTime>,
    lease_id: Option<String>,
    marker: Option<String>,
    maxresults: Option<i32>,
    method_options: ClientMethodOptions<'a>,
    range: Option<String>,
    request_id: Option<String>,
    snapshot: Option<String>,
    timeout: Option<i32>,
}

impl<'a> BlobPageBlobGetPageRangesDiffOptions<'a> {
    pub fn builder() -> builders::BlobPageBlobGetPageRangesDiffOptionsBuilder<'a> {
        builders::BlobPageBlobGetPageRangesDiffOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct BlobPageBlobResizeOptions<'a> {
    encryption_algorithm: Option<String>,
    encryption_key: Option<String>,
    encryption_key_sha256: Option<String>,
    encryption_scope: Option<String>,
    if_match: Option<String>,
    if_modified_since: Option<OffsetDateTime>,
    if_none_match: Option<String>,
    if_tags: Option<String>,
    if_unmodified_since: Option<OffsetDateTime>,
    lease_id: Option<String>,
    method_options: ClientMethodOptions<'a>,
    request_id: Option<String>,
    timeout: Option<i32>,
}

impl<'a> BlobPageBlobResizeOptions<'a> {
    pub fn builder() -> builders::BlobPageBlobResizeOptionsBuilder<'a> {
        builders::BlobPageBlobResizeOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct BlobPageBlobUpdateSequenceNumberOptions<'a> {
    if_match: Option<String>,
    if_modified_since: Option<OffsetDateTime>,
    if_none_match: Option<String>,
    if_tags: Option<String>,
    if_unmodified_since: Option<OffsetDateTime>,
    lease_id: Option<String>,
    method_options: ClientMethodOptions<'a>,
    request_id: Option<String>,
    timeout: Option<i32>,
}

impl<'a> BlobPageBlobUpdateSequenceNumberOptions<'a> {
    pub fn builder() -> builders::BlobPageBlobUpdateSequenceNumberOptionsBuilder<'a> {
        builders::BlobPageBlobUpdateSequenceNumberOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct BlobPageBlobUploadPagesOptions<'a> {
    encryption_algorithm: Option<String>,
    encryption_key: Option<String>,
    encryption_key_sha256: Option<String>,
    encryption_scope: Option<String>,
    if_match: Option<String>,
    if_modified_since: Option<OffsetDateTime>,
    if_none_match: Option<String>,
    if_sequence_number_equal_to: Option<i64>,
    if_sequence_number_less_than: Option<i64>,
    if_sequence_number_less_than_or_equal_to: Option<i64>,
    if_tags: Option<String>,
    if_unmodified_since: Option<OffsetDateTime>,
    lease_id: Option<String>,
    method_options: ClientMethodOptions<'a>,
    range: Option<String>,
    request_id: Option<String>,
    timeout: Option<i32>,
    transactional_content_crc64: Option<String>,
    transactional_content_md5: Option<String>,
}

impl<'a> BlobPageBlobUploadPagesOptions<'a> {
    pub fn builder() -> builders::BlobPageBlobUploadPagesOptionsBuilder<'a> {
        builders::BlobPageBlobUploadPagesOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct BlobPageBlobUploadPagesFromUrlOptions<'a> {
    copy_source_authorization: Option<String>,
    encryption_algorithm: Option<String>,
    encryption_key: Option<String>,
    encryption_key_sha256: Option<String>,
    encryption_scope: Option<String>,
    if_match: Option<String>,
    if_modified_since: Option<OffsetDateTime>,
    if_none_match: Option<String>,
    if_sequence_number_equal_to: Option<i64>,
    if_sequence_number_less_than: Option<i64>,
    if_sequence_number_less_than_or_equal_to: Option<i64>,
    if_tags: Option<String>,
    if_unmodified_since: Option<OffsetDateTime>,
    lease_id: Option<String>,
    method_options: ClientMethodOptions<'a>,
    request_id: Option<String>,
    source_content_crc64: Option<String>,
    source_content_md5: Option<String>,
    source_if_match: Option<String>,
    source_if_modified_since: Option<OffsetDateTime>,
    source_if_none_match: Option<String>,
    source_if_unmodified_since: Option<OffsetDateTime>,
    timeout: Option<i32>,
}

impl<'a> BlobPageBlobUploadPagesFromUrlOptions<'a> {
    pub fn builder() -> builders::BlobPageBlobUploadPagesFromUrlOptionsBuilder<'a> {
        builders::BlobPageBlobUploadPagesFromUrlOptionsBuilder::new()
    }
}

pub mod builders {
    use super::*;

    pub struct BlobPageBlobClearPagesOptionsBuilder<'a> {
        options: BlobPageBlobClearPagesOptions<'a>,
    }

    impl BlobPageBlobClearPagesOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: BlobPageBlobClearPagesOptions::default(),
            }
        }

        pub fn build(&self) -> BlobPageBlobClearPagesOptions {
            self.options.clone()
        }

        pub fn with_if_match(mut self, if_match: String) -> Self {
            self.options.if_match = Some(if_match);
            self
        }

        pub fn with_if_modified_since(mut self, if_modified_since: OffsetDateTime) -> Self {
            self.options.if_modified_since = Some(if_modified_since);
            self
        }

        pub fn with_if_none_match(mut self, if_none_match: String) -> Self {
            self.options.if_none_match = Some(if_none_match);
            self
        }

        pub fn with_if_sequence_number_equal_to(
            mut self,
            if_sequence_number_equal_to: i64,
        ) -> Self {
            self.options.if_sequence_number_equal_to = Some(if_sequence_number_equal_to);
            self
        }

        pub fn with_if_sequence_number_less_than(
            mut self,
            if_sequence_number_less_than: i64,
        ) -> Self {
            self.options.if_sequence_number_less_than = Some(if_sequence_number_less_than);
            self
        }

        pub fn with_if_sequence_number_less_than_or_equal_to(
            mut self,
            if_sequence_number_less_than_or_equal_to: i64,
        ) -> Self {
            self.options.if_sequence_number_less_than_or_equal_to =
                Some(if_sequence_number_less_than_or_equal_to);
            self
        }

        pub fn with_if_tags(mut self, if_tags: String) -> Self {
            self.options.if_tags = Some(if_tags);
            self
        }

        pub fn with_if_unmodified_since(mut self, if_unmodified_since: OffsetDateTime) -> Self {
            self.options.if_unmodified_since = Some(if_unmodified_since);
            self
        }

        pub fn with_lease_id(mut self, lease_id: String) -> Self {
            self.options.lease_id = Some(lease_id);
            self
        }

        pub fn with_range(mut self, range: String) -> Self {
            self.options.range = Some(range);
            self
        }

        pub fn with_request_id(mut self, request_id: String) -> Self {
            self.options.request_id = Some(request_id);
            self
        }

        pub fn with_timeout(mut self, timeout: i32) -> Self {
            self.options.timeout = Some(timeout);
            self
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for BlobPageBlobClearPagesOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct BlobPageBlobCopyIncrementalOptionsBuilder<'a> {
        options: BlobPageBlobCopyIncrementalOptions<'a>,
    }

    impl BlobPageBlobCopyIncrementalOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: BlobPageBlobCopyIncrementalOptions::default(),
            }
        }

        pub fn build(&self) -> BlobPageBlobCopyIncrementalOptions {
            self.options.clone()
        }

        pub fn with_if_match(mut self, if_match: String) -> Self {
            self.options.if_match = Some(if_match);
            self
        }

        pub fn with_if_modified_since(mut self, if_modified_since: OffsetDateTime) -> Self {
            self.options.if_modified_since = Some(if_modified_since);
            self
        }

        pub fn with_if_none_match(mut self, if_none_match: String) -> Self {
            self.options.if_none_match = Some(if_none_match);
            self
        }

        pub fn with_if_tags(mut self, if_tags: String) -> Self {
            self.options.if_tags = Some(if_tags);
            self
        }

        pub fn with_if_unmodified_since(mut self, if_unmodified_since: OffsetDateTime) -> Self {
            self.options.if_unmodified_since = Some(if_unmodified_since);
            self
        }

        pub fn with_lease_id(mut self, lease_id: String) -> Self {
            self.options.lease_id = Some(lease_id);
            self
        }

        pub fn with_request_id(mut self, request_id: String) -> Self {
            self.options.request_id = Some(request_id);
            self
        }

        pub fn with_timeout(mut self, timeout: i32) -> Self {
            self.options.timeout = Some(timeout);
            self
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for BlobPageBlobCopyIncrementalOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct BlobPageBlobCreateOptionsBuilder<'a> {
        options: BlobPageBlobCreateOptions<'a>,
    }

    impl BlobPageBlobCreateOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: BlobPageBlobCreateOptions::default(),
            }
        }

        pub fn build(&self) -> BlobPageBlobCreateOptions {
            self.options.clone()
        }

        pub fn with_access_tier(mut self, access_tier: PremiumPageBlobAccessTier) -> Self {
            self.options.access_tier = Some(access_tier);
            self
        }

        pub fn with_blob_cache_control(mut self, blob_cache_control: String) -> Self {
            self.options.blob_cache_control = Some(blob_cache_control);
            self
        }

        pub fn with_blob_content_disposition(mut self, blob_content_disposition: String) -> Self {
            self.options.blob_content_disposition = Some(blob_content_disposition);
            self
        }

        pub fn with_blob_content_encoding(mut self, blob_content_encoding: String) -> Self {
            self.options.blob_content_encoding = Some(blob_content_encoding);
            self
        }

        pub fn with_blob_content_language(mut self, blob_content_language: String) -> Self {
            self.options.blob_content_language = Some(blob_content_language);
            self
        }

        pub fn with_blob_content_md5(mut self, blob_content_md5: String) -> Self {
            self.options.blob_content_md5 = Some(blob_content_md5);
            self
        }

        pub fn with_blob_content_type(mut self, blob_content_type: String) -> Self {
            self.options.blob_content_type = Some(blob_content_type);
            self
        }

        pub fn with_blob_sequence_number(mut self, blob_sequence_number: i64) -> Self {
            self.options.blob_sequence_number = Some(blob_sequence_number);
            self
        }

        pub fn with_blob_tags_string(mut self, blob_tags_string: String) -> Self {
            self.options.blob_tags_string = Some(blob_tags_string);
            self
        }

        pub fn with_encryption_algorithm(mut self, encryption_algorithm: String) -> Self {
            self.options.encryption_algorithm = Some(encryption_algorithm);
            self
        }

        pub fn with_encryption_key(mut self, encryption_key: String) -> Self {
            self.options.encryption_key = Some(encryption_key);
            self
        }

        pub fn with_encryption_key_sha256(mut self, encryption_key_sha256: String) -> Self {
            self.options.encryption_key_sha256 = Some(encryption_key_sha256);
            self
        }

        pub fn with_encryption_scope(mut self, encryption_scope: String) -> Self {
            self.options.encryption_scope = Some(encryption_scope);
            self
        }

        pub fn with_if_match(mut self, if_match: String) -> Self {
            self.options.if_match = Some(if_match);
            self
        }

        pub fn with_if_modified_since(mut self, if_modified_since: OffsetDateTime) -> Self {
            self.options.if_modified_since = Some(if_modified_since);
            self
        }

        pub fn with_if_none_match(mut self, if_none_match: String) -> Self {
            self.options.if_none_match = Some(if_none_match);
            self
        }

        pub fn with_if_tags(mut self, if_tags: String) -> Self {
            self.options.if_tags = Some(if_tags);
            self
        }

        pub fn with_if_unmodified_since(mut self, if_unmodified_since: OffsetDateTime) -> Self {
            self.options.if_unmodified_since = Some(if_unmodified_since);
            self
        }

        pub fn with_immutability_policy_expiry(
            mut self,
            immutability_policy_expiry: String,
        ) -> Self {
            self.options.immutability_policy_expiry = Some(immutability_policy_expiry);
            self
        }

        pub fn with_lease_id(mut self, lease_id: String) -> Self {
            self.options.lease_id = Some(lease_id);
            self
        }

        pub fn with_legal_hold(mut self, legal_hold: bool) -> Self {
            self.options.legal_hold = Some(legal_hold);
            self
        }

        pub fn with_request_id(mut self, request_id: String) -> Self {
            self.options.request_id = Some(request_id);
            self
        }

        pub fn with_timeout(mut self, timeout: i32) -> Self {
            self.options.timeout = Some(timeout);
            self
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for BlobPageBlobCreateOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct BlobPageBlobGetPageRangesOptionsBuilder<'a> {
        options: BlobPageBlobGetPageRangesOptions<'a>,
    }

    impl BlobPageBlobGetPageRangesOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: BlobPageBlobGetPageRangesOptions::default(),
            }
        }

        pub fn build(&self) -> BlobPageBlobGetPageRangesOptions {
            self.options.clone()
        }

        pub fn with_if_match(mut self, if_match: String) -> Self {
            self.options.if_match = Some(if_match);
            self
        }

        pub fn with_if_modified_since(mut self, if_modified_since: OffsetDateTime) -> Self {
            self.options.if_modified_since = Some(if_modified_since);
            self
        }

        pub fn with_if_none_match(mut self, if_none_match: String) -> Self {
            self.options.if_none_match = Some(if_none_match);
            self
        }

        pub fn with_if_tags(mut self, if_tags: String) -> Self {
            self.options.if_tags = Some(if_tags);
            self
        }

        pub fn with_if_unmodified_since(mut self, if_unmodified_since: OffsetDateTime) -> Self {
            self.options.if_unmodified_since = Some(if_unmodified_since);
            self
        }

        pub fn with_lease_id(mut self, lease_id: String) -> Self {
            self.options.lease_id = Some(lease_id);
            self
        }

        pub fn with_marker(mut self, marker: String) -> Self {
            self.options.marker = Some(marker);
            self
        }

        pub fn with_maxresults(mut self, maxresults: i32) -> Self {
            self.options.maxresults = Some(maxresults);
            self
        }

        pub fn with_range(mut self, range: String) -> Self {
            self.options.range = Some(range);
            self
        }

        pub fn with_request_id(mut self, request_id: String) -> Self {
            self.options.request_id = Some(request_id);
            self
        }

        pub fn with_snapshot(mut self, snapshot: String) -> Self {
            self.options.snapshot = Some(snapshot);
            self
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for BlobPageBlobGetPageRangesOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct BlobPageBlobGetPageRangesDiffOptionsBuilder<'a> {
        options: BlobPageBlobGetPageRangesDiffOptions<'a>,
    }

    impl BlobPageBlobGetPageRangesDiffOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: BlobPageBlobGetPageRangesDiffOptions::default(),
            }
        }

        pub fn build(&self) -> BlobPageBlobGetPageRangesDiffOptions {
            self.options.clone()
        }

        pub fn with_if_match(mut self, if_match: String) -> Self {
            self.options.if_match = Some(if_match);
            self
        }

        pub fn with_if_modified_since(mut self, if_modified_since: OffsetDateTime) -> Self {
            self.options.if_modified_since = Some(if_modified_since);
            self
        }

        pub fn with_if_none_match(mut self, if_none_match: String) -> Self {
            self.options.if_none_match = Some(if_none_match);
            self
        }

        pub fn with_if_tags(mut self, if_tags: String) -> Self {
            self.options.if_tags = Some(if_tags);
            self
        }

        pub fn with_if_unmodified_since(mut self, if_unmodified_since: OffsetDateTime) -> Self {
            self.options.if_unmodified_since = Some(if_unmodified_since);
            self
        }

        pub fn with_lease_id(mut self, lease_id: String) -> Self {
            self.options.lease_id = Some(lease_id);
            self
        }

        pub fn with_marker(mut self, marker: String) -> Self {
            self.options.marker = Some(marker);
            self
        }

        pub fn with_maxresults(mut self, maxresults: i32) -> Self {
            self.options.maxresults = Some(maxresults);
            self
        }

        pub fn with_range(mut self, range: String) -> Self {
            self.options.range = Some(range);
            self
        }

        pub fn with_request_id(mut self, request_id: String) -> Self {
            self.options.request_id = Some(request_id);
            self
        }

        pub fn with_snapshot(mut self, snapshot: String) -> Self {
            self.options.snapshot = Some(snapshot);
            self
        }

        pub fn with_timeout(mut self, timeout: i32) -> Self {
            self.options.timeout = Some(timeout);
            self
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for BlobPageBlobGetPageRangesDiffOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct BlobPageBlobResizeOptionsBuilder<'a> {
        options: BlobPageBlobResizeOptions<'a>,
    }

    impl BlobPageBlobResizeOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: BlobPageBlobResizeOptions::default(),
            }
        }

        pub fn build(&self) -> BlobPageBlobResizeOptions {
            self.options.clone()
        }

        pub fn with_encryption_algorithm(mut self, encryption_algorithm: String) -> Self {
            self.options.encryption_algorithm = Some(encryption_algorithm);
            self
        }

        pub fn with_encryption_key(mut self, encryption_key: String) -> Self {
            self.options.encryption_key = Some(encryption_key);
            self
        }

        pub fn with_encryption_key_sha256(mut self, encryption_key_sha256: String) -> Self {
            self.options.encryption_key_sha256 = Some(encryption_key_sha256);
            self
        }

        pub fn with_encryption_scope(mut self, encryption_scope: String) -> Self {
            self.options.encryption_scope = Some(encryption_scope);
            self
        }

        pub fn with_if_match(mut self, if_match: String) -> Self {
            self.options.if_match = Some(if_match);
            self
        }

        pub fn with_if_modified_since(mut self, if_modified_since: OffsetDateTime) -> Self {
            self.options.if_modified_since = Some(if_modified_since);
            self
        }

        pub fn with_if_none_match(mut self, if_none_match: String) -> Self {
            self.options.if_none_match = Some(if_none_match);
            self
        }

        pub fn with_if_tags(mut self, if_tags: String) -> Self {
            self.options.if_tags = Some(if_tags);
            self
        }

        pub fn with_if_unmodified_since(mut self, if_unmodified_since: OffsetDateTime) -> Self {
            self.options.if_unmodified_since = Some(if_unmodified_since);
            self
        }

        pub fn with_lease_id(mut self, lease_id: String) -> Self {
            self.options.lease_id = Some(lease_id);
            self
        }

        pub fn with_request_id(mut self, request_id: String) -> Self {
            self.options.request_id = Some(request_id);
            self
        }

        pub fn with_timeout(mut self, timeout: i32) -> Self {
            self.options.timeout = Some(timeout);
            self
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for BlobPageBlobResizeOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct BlobPageBlobUpdateSequenceNumberOptionsBuilder<'a> {
        options: BlobPageBlobUpdateSequenceNumberOptions<'a>,
    }

    impl BlobPageBlobUpdateSequenceNumberOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: BlobPageBlobUpdateSequenceNumberOptions::default(),
            }
        }

        pub fn build(&self) -> BlobPageBlobUpdateSequenceNumberOptions {
            self.options.clone()
        }

        pub fn with_if_match(mut self, if_match: String) -> Self {
            self.options.if_match = Some(if_match);
            self
        }

        pub fn with_if_modified_since(mut self, if_modified_since: OffsetDateTime) -> Self {
            self.options.if_modified_since = Some(if_modified_since);
            self
        }

        pub fn with_if_none_match(mut self, if_none_match: String) -> Self {
            self.options.if_none_match = Some(if_none_match);
            self
        }

        pub fn with_if_tags(mut self, if_tags: String) -> Self {
            self.options.if_tags = Some(if_tags);
            self
        }

        pub fn with_if_unmodified_since(mut self, if_unmodified_since: OffsetDateTime) -> Self {
            self.options.if_unmodified_since = Some(if_unmodified_since);
            self
        }

        pub fn with_lease_id(mut self, lease_id: String) -> Self {
            self.options.lease_id = Some(lease_id);
            self
        }

        pub fn with_request_id(mut self, request_id: String) -> Self {
            self.options.request_id = Some(request_id);
            self
        }

        pub fn with_timeout(mut self, timeout: i32) -> Self {
            self.options.timeout = Some(timeout);
            self
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for BlobPageBlobUpdateSequenceNumberOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct BlobPageBlobUploadPagesOptionsBuilder<'a> {
        options: BlobPageBlobUploadPagesOptions<'a>,
    }

    impl BlobPageBlobUploadPagesOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: BlobPageBlobUploadPagesOptions::default(),
            }
        }

        pub fn build(&self) -> BlobPageBlobUploadPagesOptions {
            self.options.clone()
        }

        pub fn with_encryption_algorithm(mut self, encryption_algorithm: String) -> Self {
            self.options.encryption_algorithm = Some(encryption_algorithm);
            self
        }

        pub fn with_encryption_key(mut self, encryption_key: String) -> Self {
            self.options.encryption_key = Some(encryption_key);
            self
        }

        pub fn with_encryption_key_sha256(mut self, encryption_key_sha256: String) -> Self {
            self.options.encryption_key_sha256 = Some(encryption_key_sha256);
            self
        }

        pub fn with_encryption_scope(mut self, encryption_scope: String) -> Self {
            self.options.encryption_scope = Some(encryption_scope);
            self
        }

        pub fn with_if_match(mut self, if_match: String) -> Self {
            self.options.if_match = Some(if_match);
            self
        }

        pub fn with_if_modified_since(mut self, if_modified_since: OffsetDateTime) -> Self {
            self.options.if_modified_since = Some(if_modified_since);
            self
        }

        pub fn with_if_none_match(mut self, if_none_match: String) -> Self {
            self.options.if_none_match = Some(if_none_match);
            self
        }

        pub fn with_if_sequence_number_equal_to(
            mut self,
            if_sequence_number_equal_to: i64,
        ) -> Self {
            self.options.if_sequence_number_equal_to = Some(if_sequence_number_equal_to);
            self
        }

        pub fn with_if_sequence_number_less_than(
            mut self,
            if_sequence_number_less_than: i64,
        ) -> Self {
            self.options.if_sequence_number_less_than = Some(if_sequence_number_less_than);
            self
        }

        pub fn with_if_sequence_number_less_than_or_equal_to(
            mut self,
            if_sequence_number_less_than_or_equal_to: i64,
        ) -> Self {
            self.options.if_sequence_number_less_than_or_equal_to =
                Some(if_sequence_number_less_than_or_equal_to);
            self
        }

        pub fn with_if_tags(mut self, if_tags: String) -> Self {
            self.options.if_tags = Some(if_tags);
            self
        }

        pub fn with_if_unmodified_since(mut self, if_unmodified_since: OffsetDateTime) -> Self {
            self.options.if_unmodified_since = Some(if_unmodified_since);
            self
        }

        pub fn with_lease_id(mut self, lease_id: String) -> Self {
            self.options.lease_id = Some(lease_id);
            self
        }

        pub fn with_range(mut self, range: String) -> Self {
            self.options.range = Some(range);
            self
        }

        pub fn with_request_id(mut self, request_id: String) -> Self {
            self.options.request_id = Some(request_id);
            self
        }

        pub fn with_timeout(mut self, timeout: i32) -> Self {
            self.options.timeout = Some(timeout);
            self
        }

        pub fn with_transactional_content_crc64(
            mut self,
            transactional_content_crc64: String,
        ) -> Self {
            self.options.transactional_content_crc64 = Some(transactional_content_crc64);
            self
        }

        pub fn with_transactional_content_md5(mut self, transactional_content_md5: String) -> Self {
            self.options.transactional_content_md5 = Some(transactional_content_md5);
            self
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for BlobPageBlobUploadPagesOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct BlobPageBlobUploadPagesFromUrlOptionsBuilder<'a> {
        options: BlobPageBlobUploadPagesFromUrlOptions<'a>,
    }

    impl BlobPageBlobUploadPagesFromUrlOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: BlobPageBlobUploadPagesFromUrlOptions::default(),
            }
        }

        pub fn build(&self) -> BlobPageBlobUploadPagesFromUrlOptions {
            self.options.clone()
        }

        pub fn with_copy_source_authorization(mut self, copy_source_authorization: String) -> Self {
            self.options.copy_source_authorization = Some(copy_source_authorization);
            self
        }

        pub fn with_encryption_algorithm(mut self, encryption_algorithm: String) -> Self {
            self.options.encryption_algorithm = Some(encryption_algorithm);
            self
        }

        pub fn with_encryption_key(mut self, encryption_key: String) -> Self {
            self.options.encryption_key = Some(encryption_key);
            self
        }

        pub fn with_encryption_key_sha256(mut self, encryption_key_sha256: String) -> Self {
            self.options.encryption_key_sha256 = Some(encryption_key_sha256);
            self
        }

        pub fn with_encryption_scope(mut self, encryption_scope: String) -> Self {
            self.options.encryption_scope = Some(encryption_scope);
            self
        }

        pub fn with_if_match(mut self, if_match: String) -> Self {
            self.options.if_match = Some(if_match);
            self
        }

        pub fn with_if_modified_since(mut self, if_modified_since: OffsetDateTime) -> Self {
            self.options.if_modified_since = Some(if_modified_since);
            self
        }

        pub fn with_if_none_match(mut self, if_none_match: String) -> Self {
            self.options.if_none_match = Some(if_none_match);
            self
        }

        pub fn with_if_sequence_number_equal_to(
            mut self,
            if_sequence_number_equal_to: i64,
        ) -> Self {
            self.options.if_sequence_number_equal_to = Some(if_sequence_number_equal_to);
            self
        }

        pub fn with_if_sequence_number_less_than(
            mut self,
            if_sequence_number_less_than: i64,
        ) -> Self {
            self.options.if_sequence_number_less_than = Some(if_sequence_number_less_than);
            self
        }

        pub fn with_if_sequence_number_less_than_or_equal_to(
            mut self,
            if_sequence_number_less_than_or_equal_to: i64,
        ) -> Self {
            self.options.if_sequence_number_less_than_or_equal_to =
                Some(if_sequence_number_less_than_or_equal_to);
            self
        }

        pub fn with_if_tags(mut self, if_tags: String) -> Self {
            self.options.if_tags = Some(if_tags);
            self
        }

        pub fn with_if_unmodified_since(mut self, if_unmodified_since: OffsetDateTime) -> Self {
            self.options.if_unmodified_since = Some(if_unmodified_since);
            self
        }

        pub fn with_lease_id(mut self, lease_id: String) -> Self {
            self.options.lease_id = Some(lease_id);
            self
        }

        pub fn with_request_id(mut self, request_id: String) -> Self {
            self.options.request_id = Some(request_id);
            self
        }

        pub fn with_source_content_crc64(mut self, source_content_crc64: String) -> Self {
            self.options.source_content_crc64 = Some(source_content_crc64);
            self
        }

        pub fn with_source_content_md5(mut self, source_content_md5: String) -> Self {
            self.options.source_content_md5 = Some(source_content_md5);
            self
        }

        pub fn with_source_if_match(mut self, source_if_match: String) -> Self {
            self.options.source_if_match = Some(source_if_match);
            self
        }

        pub fn with_source_if_modified_since(
            mut self,
            source_if_modified_since: OffsetDateTime,
        ) -> Self {
            self.options.source_if_modified_since = Some(source_if_modified_since);
            self
        }

        pub fn with_source_if_none_match(mut self, source_if_none_match: String) -> Self {
            self.options.source_if_none_match = Some(source_if_none_match);
            self
        }

        pub fn with_source_if_unmodified_since(
            mut self,
            source_if_unmodified_since: OffsetDateTime,
        ) -> Self {
            self.options.source_if_unmodified_since = Some(source_if_unmodified_since);
            self
        }

        pub fn with_timeout(mut self, timeout: i32) -> Self {
            self.options.timeout = Some(timeout);
            self
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for BlobPageBlobUploadPagesFromUrlOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }
}
