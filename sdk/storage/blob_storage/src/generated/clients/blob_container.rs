// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use crate::models::{
    FilterBlobSegment, FilterBlobsIncludes, ListBlobsFlatSegmentResponse,
    ListBlobsHierarchySegmentResponse, ListBlobsIncludes, PublicAccessType, SignedIdentifier,
};
use azure_core::builders::ClientMethodOptionsBuilder;
use azure_core::{
    AsClientMethodOptions, ClientMethodOptions, Context, Method, Pipeline, Request, RequestContent,
    Response, Result, Url,
};
use time::OffsetDateTime;

pub struct BlobContainer {
    pub(in crate::generated::clients) endpoint: Url,
    pub(in crate::generated::clients) pipeline: Pipeline,
}

impl BlobContainer {
    /// [Update] establishes and manages a lock on a container for delete operations. The lock duration can be 15 to 60 seconds,
    /// or can be infinite
    pub async fn acquire_lease(
        &self,
        container_name: impl Into<String>,
        duration: i32,
        version: impl Into<String>,
        options: Option<BlobContainerAcquireLeaseOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}?comp=lease&restype=container&acquire");
        path = path.replace("{containerName}", &container_name.into());
        url.set_path(&path);
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", if_modified_since.to_string());
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", if_unmodified_since.to_string());
        }
        if let Some(request_id) = options.request_id {
            request.insert_header("x-ms-client-request-id", request_id);
        }
        request.insert_header("x-ms-lease-duration", duration.to_string());
        if let Some(proposed_lease_id) = options.proposed_lease_id {
            request.insert_header("x-ms-proposed-lease-id", proposed_lease_id);
        }
        request.insert_header("x-ms-version", version.into());
        self.pipeline.send(&mut ctx, &mut request).await
    }

    /// [Update] establishes and manages a lock on a container for delete operations. The lock duration can be 15 to 60 seconds,
    /// or can be infinite
    pub async fn break_lease(
        &self,
        container_name: impl Into<String>,
        version: impl Into<String>,
        options: Option<BlobContainerBreakLeaseOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}?comp=lease&restype=container&break");
        path = path.replace("{containerName}", &container_name.into());
        url.set_path(&path);
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", if_modified_since.to_string());
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", if_unmodified_since.to_string());
        }
        if let Some(request_id) = options.request_id {
            request.insert_header("x-ms-client-request-id", request_id);
        }
        if let Some(break_period) = options.break_period {
            request.insert_header("x-ms-lease-break-period", break_period.to_string());
        }
        request.insert_header("x-ms-version", version.into());
        self.pipeline.send(&mut ctx, &mut request).await
    }

    /// [Update] establishes and manages a lock on a container for delete operations. The lock duration can be 15 to 60 seconds,
    /// or can be infinite
    pub async fn change_lease(
        &self,
        container_name: impl Into<String>,
        lease_id: impl Into<String>,
        proposed_lease_id: impl Into<String>,
        version: impl Into<String>,
        options: Option<BlobContainerChangeLeaseOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}?comp=lease&restype=container&change");
        path = path.replace("{containerName}", &container_name.into());
        url.set_path(&path);
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", if_modified_since.to_string());
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", if_unmodified_since.to_string());
        }
        if let Some(request_id) = options.request_id {
            request.insert_header("x-ms-client-request-id", request_id);
        }
        request.insert_header("x-ms-lease-id", lease_id.into());
        request.insert_header("x-ms-proposed-lease-id", proposed_lease_id.into());
        request.insert_header("x-ms-version", version.into());
        self.pipeline.send(&mut ctx, &mut request).await
    }

    /// Creates a new container under the specified account. If the container with the same name already exists, the operation
    /// fails.
    pub async fn create(
        &self,
        container_name: impl Into<String>,
        version: impl Into<String>,
        options: Option<BlobContainerCreateOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}?restype=container");
        path = path.replace("{containerName}", &container_name.into());
        url.set_path(&path);
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        if let Some(access) = options.access {
            request.insert_header("x-ms-blob-public-access", access.to_string());
        }
        if let Some(request_id) = options.request_id {
            request.insert_header("x-ms-client-request-id", request_id);
        }
        if let Some(default_encryption_scope) = options.default_encryption_scope {
            request.insert_header("x-ms-default-encryption-scope", default_encryption_scope);
        }
        if let Some(deny_encryption_scope_override) = options.deny_encryption_scope_override {
            request.insert_header(
                "x-ms-deny-encryption-scope-override",
                deny_encryption_scope_override.to_string(),
            );
        }
        request.insert_header("x-ms-version", version.into());
        self.pipeline.send(&mut ctx, &mut request).await
    }

    /// operation marks the specified container for deletion. The container and any blobs contained within it are later deleted
    /// during garbage collection
    pub async fn delete(
        &self,
        container_name: impl Into<String>,
        version: impl Into<String>,
        options: Option<BlobContainerDeleteOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}?restype=container");
        path = path.replace("{containerName}", &container_name.into());
        url.set_path(&path);
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Delete);
        request.insert_header("accept", "application/json");
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", if_modified_since.to_string());
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", if_unmodified_since.to_string());
        }
        if let Some(request_id) = options.request_id {
            request.insert_header("x-ms-client-request-id", request_id);
        }
        if let Some(lease_id) = options.lease_id {
            request.insert_header("x-ms-lease-id", lease_id);
        }
        request.insert_header("x-ms-version", version.into());
        self.pipeline.send(&mut ctx, &mut request).await
    }

    /// The Filter Blobs operation enables callers to list blobs in a container whose tags match a given search expression. Filter
    /// blobs searches within the given container.
    pub async fn filter_blobs(
        &self,
        container_name: impl Into<String>,
        version: impl Into<String>,
        options: Option<BlobContainerFilterBlobsOptions<'_>>,
    ) -> Result<Response<FilterBlobSegment>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}?restype=container&comp=blobs");
        path = path.replace("{containerName}", &container_name.into());
        url.set_path(&path);
        if let Some(include) = options.include {
            url.query_pairs_mut().append_pair(
                "include",
                &include
                    .iter()
                    .map(|i| i.to_string())
                    .collect::<Vec<String>>()
                    .join(","),
            );
        }
        if let Some(marker) = options.marker {
            url.query_pairs_mut().append_pair("marker", &marker);
        }
        if let Some(maxresults) = options.maxresults {
            url.query_pairs_mut()
                .append_pair("maxresults", &maxresults.to_string());
        }
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        if let Some(where_param) = options.where_param {
            url.query_pairs_mut().append_pair("where", &where_param);
        }
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/json");
        if let Some(request_id) = options.request_id {
            request.insert_header("x-ms-client-request-id", request_id);
        }
        request.insert_header("x-ms-version", version.into());
        self.pipeline.send(&mut ctx, &mut request).await
    }

    /// gets the permissions for the specified container. The permissions indicate whether container data may be accessed publicly.
    pub async fn get_access_policy(
        &self,
        container_name: impl Into<String>,
        version: impl Into<String>,
        options: Option<BlobContainerGetAccessPolicyOptions<'_>>,
    ) -> Result<Response<Vec<SignedIdentifier>>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}?restype=container&comp=acl");
        path = path.replace("{containerName}", &container_name.into());
        url.set_path(&path);
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/json");
        if let Some(request_id) = options.request_id {
            request.insert_header("x-ms-client-request-id", request_id);
        }
        if let Some(lease_id) = options.lease_id {
            request.insert_header("x-ms-lease-id", lease_id);
        }
        request.insert_header("x-ms-version", version.into());
        self.pipeline.send(&mut ctx, &mut request).await
    }

    /// Returns the sku name and account kind
    pub async fn get_account_info(
        &self,
        container_name: impl Into<String>,
        version: impl Into<String>,
        options: Option<BlobContainerGetAccountInfoOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}?restype=account&comp=properties");
        path = path.replace("{containerName}", &container_name.into());
        url.set_path(&path);
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/json");
        if let Some(request_id) = options.request_id {
            request.insert_header("x-ms-client-request-id", request_id);
        }
        request.insert_header("x-ms-version", version.into());
        self.pipeline.send(&mut ctx, &mut request).await
    }

    /// returns all user-defined metadata and system properties for the specified container. The data returned does not include
    /// the container's list of blobs
    pub async fn get_properties(
        &self,
        container_name: impl Into<String>,
        version: impl Into<String>,
        options: Option<BlobContainerGetPropertiesOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}?restype=container");
        path = path.replace("{containerName}", &container_name.into());
        url.set_path(&path);
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/json");
        if let Some(request_id) = options.request_id {
            request.insert_header("x-ms-client-request-id", request_id);
        }
        if let Some(lease_id) = options.lease_id {
            request.insert_header("x-ms-lease-id", lease_id);
        }
        request.insert_header("x-ms-version", version.into());
        self.pipeline.send(&mut ctx, &mut request).await
    }

    /// [Update] The List Blobs operation returns a list of the blobs under the specified container
    pub async fn list_blob_flat_segment(
        &self,
        container_name: impl Into<String>,
        version: impl Into<String>,
        options: Option<BlobContainerListBlobFlatSegmentOptions<'_>>,
    ) -> Result<Response<ListBlobsFlatSegmentResponse>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}?restype=container&comp=list&flat");
        path = path.replace("{containerName}", &container_name.into());
        url.set_path(&path);
        if let Some(include) = options.include {
            url.query_pairs_mut().append_pair(
                "include",
                &include
                    .iter()
                    .map(|i| i.to_string())
                    .collect::<Vec<String>>()
                    .join(","),
            );
        }
        if let Some(marker) = options.marker {
            url.query_pairs_mut().append_pair("marker", &marker);
        }
        if let Some(maxresults) = options.maxresults {
            url.query_pairs_mut()
                .append_pair("maxresults", &maxresults.to_string());
        }
        if let Some(prefix) = options.prefix {
            url.query_pairs_mut().append_pair("prefix", &prefix);
        }
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/json");
        if let Some(request_id) = options.request_id {
            request.insert_header("x-ms-client-request-id", request_id);
        }
        request.insert_header("x-ms-version", version.into());
        self.pipeline.send(&mut ctx, &mut request).await
    }

    /// [Update] The List Blobs operation returns a list of the blobs under the specified container
    pub async fn list_blob_hierarchy_segment(
        &self,
        container_name: impl Into<String>,
        delimiter: impl Into<String>,
        version: impl Into<String>,
        options: Option<BlobContainerListBlobHierarchySegmentOptions<'_>>,
    ) -> Result<Response<ListBlobsHierarchySegmentResponse>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}?restype=container&comp=list&hierarchy");
        path = path.replace("{containerName}", &container_name.into());
        url.set_path(&path);
        url.query_pairs_mut()
            .append_pair("delimiter", &delimiter.into());
        if let Some(include) = options.include {
            url.query_pairs_mut().append_pair(
                "include",
                &include
                    .iter()
                    .map(|i| i.to_string())
                    .collect::<Vec<String>>()
                    .join(","),
            );
        }
        if let Some(marker) = options.marker {
            url.query_pairs_mut().append_pair("marker", &marker);
        }
        if let Some(maxresults) = options.maxresults {
            url.query_pairs_mut()
                .append_pair("maxresults", &maxresults.to_string());
        }
        if let Some(prefix) = options.prefix {
            url.query_pairs_mut().append_pair("prefix", &prefix);
        }
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Get);
        request.insert_header("accept", "application/json");
        if let Some(request_id) = options.request_id {
            request.insert_header("x-ms-client-request-id", request_id);
        }
        request.insert_header("x-ms-version", version.into());
        self.pipeline.send(&mut ctx, &mut request).await
    }

    /// [Update] establishes and manages a lock on a container for delete operations. The lock duration can be 15 to 60 seconds,
    /// or can be infinite
    pub async fn release_lease(
        &self,
        container_name: impl Into<String>,
        lease_id: impl Into<String>,
        version: impl Into<String>,
        options: Option<BlobContainerReleaseLeaseOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}?comp=lease&restype=container&release");
        path = path.replace("{containerName}", &container_name.into());
        url.set_path(&path);
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", if_modified_since.to_string());
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", if_unmodified_since.to_string());
        }
        if let Some(request_id) = options.request_id {
            request.insert_header("x-ms-client-request-id", request_id);
        }
        request.insert_header("x-ms-lease-id", lease_id.into());
        request.insert_header("x-ms-version", version.into());
        self.pipeline.send(&mut ctx, &mut request).await
    }

    /// Renames an existing container.
    pub async fn rename(
        &self,
        container_name: impl Into<String>,
        source_container_name: impl Into<String>,
        version: impl Into<String>,
        options: Option<BlobContainerRenameOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}?restype=container&comp=rename");
        path = path.replace("{containerName}", &container_name.into());
        url.set_path(&path);
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        if let Some(request_id) = options.request_id {
            request.insert_header("x-ms-client-request-id", request_id);
        }
        request.insert_header("x-ms-source-container-name", source_container_name.into());
        if let Some(source_lease_id) = options.source_lease_id {
            request.insert_header("x-ms-source-lease-id", source_lease_id);
        }
        request.insert_header("x-ms-version", version.into());
        self.pipeline.send(&mut ctx, &mut request).await
    }

    /// [Update] establishes and manages a lock on a container for delete operations. The lock duration can be 15 to 60 seconds,
    /// or can be infinite
    pub async fn renew_lease(
        &self,
        container_name: impl Into<String>,
        lease_id: impl Into<String>,
        version: impl Into<String>,
        options: Option<BlobContainerRenewLeaseOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}?comp=lease&restype=container&renew");
        path = path.replace("{containerName}", &container_name.into());
        url.set_path(&path);
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", if_modified_since.to_string());
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", if_unmodified_since.to_string());
        }
        if let Some(request_id) = options.request_id {
            request.insert_header("x-ms-client-request-id", request_id);
        }
        request.insert_header("x-ms-lease-id", lease_id.into());
        request.insert_header("x-ms-version", version.into());
        self.pipeline.send(&mut ctx, &mut request).await
    }

    /// sets the permissions for the specified container. The permissions indicate whether blobs in a container may be accessed
    /// publicly.
    pub async fn set_access_policy(
        &self,
        container_name: impl Into<String>,
        acl: RequestContent<Vec<SignedIdentifier>>,
        version: impl Into<String>,
        options: Option<BlobContainerSetAccessPolicyOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}?restype=container&comp=acl");
        path = path.replace("{containerName}", &container_name.into());
        url.set_path(&path);
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        request.insert_header("content-type", "application/json");
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", if_modified_since.to_string());
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", if_unmodified_since.to_string());
        }
        if let Some(request_id) = options.request_id {
            request.insert_header("x-ms-client-request-id", request_id);
        }
        if let Some(lease_id) = options.lease_id {
            request.insert_header("x-ms-lease-id", lease_id);
        }
        request.insert_header("x-ms-version", version.into());
        request.set_body(acl);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    /// operation sets one or more user-defined name-value pairs for the specified container.
    pub async fn set_metadata(
        &self,
        container_name: impl Into<String>,
        version: impl Into<String>,
        options: Option<BlobContainerSetMetadataOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}?restype=container&comp=metadata");
        path = path.replace("{containerName}", &container_name.into());
        url.set_path(&path);
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", if_modified_since.to_string());
        }
        if let Some(request_id) = options.request_id {
            request.insert_header("x-ms-client-request-id", request_id);
        }
        if let Some(lease_id) = options.lease_id {
            request.insert_header("x-ms-lease-id", lease_id);
        }
        request.insert_header("x-ms-version", version.into());
        self.pipeline.send(&mut ctx, &mut request).await
    }

    /// The Batch operation allows multiple API calls to be embedded into a single HTTP request.
    pub async fn submit_batch(
        &self,
        body: RequestContent<Vec<u8>>,
        container_name: impl Into<String>,
        content_length: i64,
        version: impl Into<String>,
        options: Option<BlobContainerSubmitBatchOptions<'_>>,
    ) -> Result<Response<Vec<u8>>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}?restype=container&comp=batch");
        path = path.replace("{containerName}", &container_name.into());
        url.set_path(&path);
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Post);
        request.insert_header("accept", "application/json");
        request.insert_header("content-length", content_length.to_string());
        request.insert_header("content-type", "application/json");
        if let Some(request_id) = options.request_id {
            request.insert_header("x-ms-client-request-id", request_id);
        }
        request.insert_header("x-ms-version", version.into());
        request.set_body(body);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    /// Restores a previously-deleted container.
    pub async fn undelete(
        &self,
        container_name: impl Into<String>,
        version: impl Into<String>,
        options: Option<BlobContainerUndeleteOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}?restype=container&comp=undelete");
        path = path.replace("{containerName}", &container_name.into());
        url.set_path(&path);
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        if let Some(request_id) = options.request_id {
            request.insert_header("x-ms-client-request-id", request_id);
        }
        if let Some(deleted_container_name) = options.deleted_container_name {
            request.insert_header("x-ms-deleted-container-name", deleted_container_name);
        }
        if let Some(deleted_container_version) = options.deleted_container_version {
            request.insert_header("x-ms-deleted-container-version", deleted_container_version);
        }
        request.insert_header("x-ms-version", version.into());
        self.pipeline.send(&mut ctx, &mut request).await
    }
}

#[derive(Clone, Debug, Default)]
pub struct BlobContainerAcquireLeaseOptions<'a> {
    if_modified_since: Option<OffsetDateTime>,
    if_unmodified_since: Option<OffsetDateTime>,
    method_options: ClientMethodOptions<'a>,
    proposed_lease_id: Option<String>,
    request_id: Option<String>,
    timeout: Option<i32>,
}

impl<'a> BlobContainerAcquireLeaseOptions<'a> {
    pub fn builder() -> builders::BlobContainerAcquireLeaseOptionsBuilder<'a> {
        builders::BlobContainerAcquireLeaseOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct BlobContainerBreakLeaseOptions<'a> {
    break_period: Option<i32>,
    if_modified_since: Option<OffsetDateTime>,
    if_unmodified_since: Option<OffsetDateTime>,
    method_options: ClientMethodOptions<'a>,
    request_id: Option<String>,
    timeout: Option<i32>,
}

impl<'a> BlobContainerBreakLeaseOptions<'a> {
    pub fn builder() -> builders::BlobContainerBreakLeaseOptionsBuilder<'a> {
        builders::BlobContainerBreakLeaseOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct BlobContainerChangeLeaseOptions<'a> {
    if_modified_since: Option<OffsetDateTime>,
    if_unmodified_since: Option<OffsetDateTime>,
    method_options: ClientMethodOptions<'a>,
    request_id: Option<String>,
    timeout: Option<i32>,
}

impl<'a> BlobContainerChangeLeaseOptions<'a> {
    pub fn builder() -> builders::BlobContainerChangeLeaseOptionsBuilder<'a> {
        builders::BlobContainerChangeLeaseOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct BlobContainerCreateOptions<'a> {
    access: Option<PublicAccessType>,
    default_encryption_scope: Option<String>,
    deny_encryption_scope_override: Option<bool>,
    method_options: ClientMethodOptions<'a>,
    request_id: Option<String>,
    timeout: Option<i32>,
}

impl<'a> BlobContainerCreateOptions<'a> {
    pub fn builder() -> builders::BlobContainerCreateOptionsBuilder<'a> {
        builders::BlobContainerCreateOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct BlobContainerDeleteOptions<'a> {
    if_modified_since: Option<OffsetDateTime>,
    if_unmodified_since: Option<OffsetDateTime>,
    lease_id: Option<String>,
    method_options: ClientMethodOptions<'a>,
    request_id: Option<String>,
    timeout: Option<i32>,
}

impl<'a> BlobContainerDeleteOptions<'a> {
    pub fn builder() -> builders::BlobContainerDeleteOptionsBuilder<'a> {
        builders::BlobContainerDeleteOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct BlobContainerFilterBlobsOptions<'a> {
    include: Option<Vec<FilterBlobsIncludes>>,
    marker: Option<String>,
    maxresults: Option<i32>,
    method_options: ClientMethodOptions<'a>,
    request_id: Option<String>,
    timeout: Option<i32>,
    where_param: Option<String>,
}

impl<'a> BlobContainerFilterBlobsOptions<'a> {
    pub fn builder() -> builders::BlobContainerFilterBlobsOptionsBuilder<'a> {
        builders::BlobContainerFilterBlobsOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct BlobContainerGetAccessPolicyOptions<'a> {
    lease_id: Option<String>,
    method_options: ClientMethodOptions<'a>,
    request_id: Option<String>,
    timeout: Option<i32>,
}

impl<'a> BlobContainerGetAccessPolicyOptions<'a> {
    pub fn builder() -> builders::BlobContainerGetAccessPolicyOptionsBuilder<'a> {
        builders::BlobContainerGetAccessPolicyOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct BlobContainerGetAccountInfoOptions<'a> {
    method_options: ClientMethodOptions<'a>,
    request_id: Option<String>,
}

impl<'a> BlobContainerGetAccountInfoOptions<'a> {
    pub fn builder() -> builders::BlobContainerGetAccountInfoOptionsBuilder<'a> {
        builders::BlobContainerGetAccountInfoOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct BlobContainerGetPropertiesOptions<'a> {
    lease_id: Option<String>,
    method_options: ClientMethodOptions<'a>,
    request_id: Option<String>,
    timeout: Option<i32>,
}

impl<'a> BlobContainerGetPropertiesOptions<'a> {
    pub fn builder() -> builders::BlobContainerGetPropertiesOptionsBuilder<'a> {
        builders::BlobContainerGetPropertiesOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct BlobContainerListBlobFlatSegmentOptions<'a> {
    include: Option<Vec<ListBlobsIncludes>>,
    marker: Option<String>,
    maxresults: Option<i32>,
    method_options: ClientMethodOptions<'a>,
    prefix: Option<String>,
    request_id: Option<String>,
    timeout: Option<i32>,
}

impl<'a> BlobContainerListBlobFlatSegmentOptions<'a> {
    pub fn builder() -> builders::BlobContainerListBlobFlatSegmentOptionsBuilder<'a> {
        builders::BlobContainerListBlobFlatSegmentOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct BlobContainerListBlobHierarchySegmentOptions<'a> {
    include: Option<Vec<ListBlobsIncludes>>,
    marker: Option<String>,
    maxresults: Option<i32>,
    method_options: ClientMethodOptions<'a>,
    prefix: Option<String>,
    request_id: Option<String>,
    timeout: Option<i32>,
}

impl<'a> BlobContainerListBlobHierarchySegmentOptions<'a> {
    pub fn builder() -> builders::BlobContainerListBlobHierarchySegmentOptionsBuilder<'a> {
        builders::BlobContainerListBlobHierarchySegmentOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct BlobContainerReleaseLeaseOptions<'a> {
    if_modified_since: Option<OffsetDateTime>,
    if_unmodified_since: Option<OffsetDateTime>,
    method_options: ClientMethodOptions<'a>,
    request_id: Option<String>,
    timeout: Option<i32>,
}

impl<'a> BlobContainerReleaseLeaseOptions<'a> {
    pub fn builder() -> builders::BlobContainerReleaseLeaseOptionsBuilder<'a> {
        builders::BlobContainerReleaseLeaseOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct BlobContainerRenameOptions<'a> {
    method_options: ClientMethodOptions<'a>,
    request_id: Option<String>,
    source_lease_id: Option<String>,
    timeout: Option<i32>,
}

impl<'a> BlobContainerRenameOptions<'a> {
    pub fn builder() -> builders::BlobContainerRenameOptionsBuilder<'a> {
        builders::BlobContainerRenameOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct BlobContainerRenewLeaseOptions<'a> {
    if_modified_since: Option<OffsetDateTime>,
    if_unmodified_since: Option<OffsetDateTime>,
    method_options: ClientMethodOptions<'a>,
    request_id: Option<String>,
    timeout: Option<i32>,
}

impl<'a> BlobContainerRenewLeaseOptions<'a> {
    pub fn builder() -> builders::BlobContainerRenewLeaseOptionsBuilder<'a> {
        builders::BlobContainerRenewLeaseOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct BlobContainerSetAccessPolicyOptions<'a> {
    if_modified_since: Option<OffsetDateTime>,
    if_unmodified_since: Option<OffsetDateTime>,
    lease_id: Option<String>,
    method_options: ClientMethodOptions<'a>,
    request_id: Option<String>,
    timeout: Option<i32>,
}

impl<'a> BlobContainerSetAccessPolicyOptions<'a> {
    pub fn builder() -> builders::BlobContainerSetAccessPolicyOptionsBuilder<'a> {
        builders::BlobContainerSetAccessPolicyOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct BlobContainerSetMetadataOptions<'a> {
    if_modified_since: Option<OffsetDateTime>,
    lease_id: Option<String>,
    method_options: ClientMethodOptions<'a>,
    request_id: Option<String>,
    timeout: Option<i32>,
}

impl<'a> BlobContainerSetMetadataOptions<'a> {
    pub fn builder() -> builders::BlobContainerSetMetadataOptionsBuilder<'a> {
        builders::BlobContainerSetMetadataOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct BlobContainerSubmitBatchOptions<'a> {
    method_options: ClientMethodOptions<'a>,
    request_id: Option<String>,
    timeout: Option<i32>,
}

impl<'a> BlobContainerSubmitBatchOptions<'a> {
    pub fn builder() -> builders::BlobContainerSubmitBatchOptionsBuilder<'a> {
        builders::BlobContainerSubmitBatchOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct BlobContainerUndeleteOptions<'a> {
    deleted_container_name: Option<String>,
    deleted_container_version: Option<String>,
    method_options: ClientMethodOptions<'a>,
    request_id: Option<String>,
    timeout: Option<i32>,
}

impl<'a> BlobContainerUndeleteOptions<'a> {
    pub fn builder() -> builders::BlobContainerUndeleteOptionsBuilder<'a> {
        builders::BlobContainerUndeleteOptionsBuilder::new()
    }
}

pub mod builders {
    use super::*;

    pub struct BlobContainerAcquireLeaseOptionsBuilder<'a> {
        options: BlobContainerAcquireLeaseOptions<'a>,
    }

    impl BlobContainerAcquireLeaseOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: BlobContainerAcquireLeaseOptions::default(),
            }
        }

        pub fn build(&self) -> BlobContainerAcquireLeaseOptions {
            self.options.clone()
        }

        pub fn with_if_modified_since(mut self, if_modified_since: OffsetDateTime) -> Self {
            self.options.if_modified_since = Some(if_modified_since);
            self
        }

        pub fn with_if_unmodified_since(mut self, if_unmodified_since: OffsetDateTime) -> Self {
            self.options.if_unmodified_since = Some(if_unmodified_since);
            self
        }

        pub fn with_proposed_lease_id(mut self, proposed_lease_id: String) -> Self {
            self.options.proposed_lease_id = Some(proposed_lease_id);
            self
        }

        pub fn with_request_id(mut self, request_id: String) -> Self {
            self.options.request_id = Some(request_id);
            self
        }

        pub fn with_timeout(mut self, timeout: i32) -> Self {
            self.options.timeout = Some(timeout);
            self
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for BlobContainerAcquireLeaseOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct BlobContainerBreakLeaseOptionsBuilder<'a> {
        options: BlobContainerBreakLeaseOptions<'a>,
    }

    impl BlobContainerBreakLeaseOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: BlobContainerBreakLeaseOptions::default(),
            }
        }

        pub fn build(&self) -> BlobContainerBreakLeaseOptions {
            self.options.clone()
        }

        pub fn with_break_period(mut self, break_period: i32) -> Self {
            self.options.break_period = Some(break_period);
            self
        }

        pub fn with_if_modified_since(mut self, if_modified_since: OffsetDateTime) -> Self {
            self.options.if_modified_since = Some(if_modified_since);
            self
        }

        pub fn with_if_unmodified_since(mut self, if_unmodified_since: OffsetDateTime) -> Self {
            self.options.if_unmodified_since = Some(if_unmodified_since);
            self
        }

        pub fn with_request_id(mut self, request_id: String) -> Self {
            self.options.request_id = Some(request_id);
            self
        }

        pub fn with_timeout(mut self, timeout: i32) -> Self {
            self.options.timeout = Some(timeout);
            self
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for BlobContainerBreakLeaseOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct BlobContainerChangeLeaseOptionsBuilder<'a> {
        options: BlobContainerChangeLeaseOptions<'a>,
    }

    impl BlobContainerChangeLeaseOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: BlobContainerChangeLeaseOptions::default(),
            }
        }

        pub fn build(&self) -> BlobContainerChangeLeaseOptions {
            self.options.clone()
        }

        pub fn with_if_modified_since(mut self, if_modified_since: OffsetDateTime) -> Self {
            self.options.if_modified_since = Some(if_modified_since);
            self
        }

        pub fn with_if_unmodified_since(mut self, if_unmodified_since: OffsetDateTime) -> Self {
            self.options.if_unmodified_since = Some(if_unmodified_since);
            self
        }

        pub fn with_request_id(mut self, request_id: String) -> Self {
            self.options.request_id = Some(request_id);
            self
        }

        pub fn with_timeout(mut self, timeout: i32) -> Self {
            self.options.timeout = Some(timeout);
            self
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for BlobContainerChangeLeaseOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct BlobContainerCreateOptionsBuilder<'a> {
        options: BlobContainerCreateOptions<'a>,
    }

    impl BlobContainerCreateOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: BlobContainerCreateOptions::default(),
            }
        }

        pub fn build(&self) -> BlobContainerCreateOptions {
            self.options.clone()
        }

        pub fn with_access(mut self, access: PublicAccessType) -> Self {
            self.options.access = Some(access);
            self
        }

        pub fn with_default_encryption_scope(mut self, default_encryption_scope: String) -> Self {
            self.options.default_encryption_scope = Some(default_encryption_scope);
            self
        }

        pub fn with_deny_encryption_scope_override(
            mut self,
            deny_encryption_scope_override: bool,
        ) -> Self {
            self.options.deny_encryption_scope_override = Some(deny_encryption_scope_override);
            self
        }

        pub fn with_request_id(mut self, request_id: String) -> Self {
            self.options.request_id = Some(request_id);
            self
        }

        pub fn with_timeout(mut self, timeout: i32) -> Self {
            self.options.timeout = Some(timeout);
            self
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for BlobContainerCreateOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct BlobContainerDeleteOptionsBuilder<'a> {
        options: BlobContainerDeleteOptions<'a>,
    }

    impl BlobContainerDeleteOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: BlobContainerDeleteOptions::default(),
            }
        }

        pub fn build(&self) -> BlobContainerDeleteOptions {
            self.options.clone()
        }

        pub fn with_if_modified_since(mut self, if_modified_since: OffsetDateTime) -> Self {
            self.options.if_modified_since = Some(if_modified_since);
            self
        }

        pub fn with_if_unmodified_since(mut self, if_unmodified_since: OffsetDateTime) -> Self {
            self.options.if_unmodified_since = Some(if_unmodified_since);
            self
        }

        pub fn with_lease_id(mut self, lease_id: String) -> Self {
            self.options.lease_id = Some(lease_id);
            self
        }

        pub fn with_request_id(mut self, request_id: String) -> Self {
            self.options.request_id = Some(request_id);
            self
        }

        pub fn with_timeout(mut self, timeout: i32) -> Self {
            self.options.timeout = Some(timeout);
            self
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for BlobContainerDeleteOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct BlobContainerFilterBlobsOptionsBuilder<'a> {
        options: BlobContainerFilterBlobsOptions<'a>,
    }

    impl BlobContainerFilterBlobsOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: BlobContainerFilterBlobsOptions::default(),
            }
        }

        pub fn build(&self) -> BlobContainerFilterBlobsOptions {
            self.options.clone()
        }

        pub fn with_include(mut self, include: Vec<FilterBlobsIncludes>) -> Self {
            self.options.include = Some(include);
            self
        }

        pub fn with_marker(mut self, marker: String) -> Self {
            self.options.marker = Some(marker);
            self
        }

        pub fn with_maxresults(mut self, maxresults: i32) -> Self {
            self.options.maxresults = Some(maxresults);
            self
        }

        pub fn with_request_id(mut self, request_id: String) -> Self {
            self.options.request_id = Some(request_id);
            self
        }

        pub fn with_timeout(mut self, timeout: i32) -> Self {
            self.options.timeout = Some(timeout);
            self
        }

        pub fn with_where_param(mut self, where_param: String) -> Self {
            self.options.where_param = Some(where_param);
            self
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for BlobContainerFilterBlobsOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct BlobContainerGetAccessPolicyOptionsBuilder<'a> {
        options: BlobContainerGetAccessPolicyOptions<'a>,
    }

    impl BlobContainerGetAccessPolicyOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: BlobContainerGetAccessPolicyOptions::default(),
            }
        }

        pub fn build(&self) -> BlobContainerGetAccessPolicyOptions {
            self.options.clone()
        }

        pub fn with_lease_id(mut self, lease_id: String) -> Self {
            self.options.lease_id = Some(lease_id);
            self
        }

        pub fn with_request_id(mut self, request_id: String) -> Self {
            self.options.request_id = Some(request_id);
            self
        }

        pub fn with_timeout(mut self, timeout: i32) -> Self {
            self.options.timeout = Some(timeout);
            self
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for BlobContainerGetAccessPolicyOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct BlobContainerGetAccountInfoOptionsBuilder<'a> {
        options: BlobContainerGetAccountInfoOptions<'a>,
    }

    impl BlobContainerGetAccountInfoOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: BlobContainerGetAccountInfoOptions::default(),
            }
        }

        pub fn build(&self) -> BlobContainerGetAccountInfoOptions {
            self.options.clone()
        }

        pub fn with_request_id(mut self, request_id: String) -> Self {
            self.options.request_id = Some(request_id);
            self
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for BlobContainerGetAccountInfoOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct BlobContainerGetPropertiesOptionsBuilder<'a> {
        options: BlobContainerGetPropertiesOptions<'a>,
    }

    impl BlobContainerGetPropertiesOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: BlobContainerGetPropertiesOptions::default(),
            }
        }

        pub fn build(&self) -> BlobContainerGetPropertiesOptions {
            self.options.clone()
        }

        pub fn with_lease_id(mut self, lease_id: String) -> Self {
            self.options.lease_id = Some(lease_id);
            self
        }

        pub fn with_request_id(mut self, request_id: String) -> Self {
            self.options.request_id = Some(request_id);
            self
        }

        pub fn with_timeout(mut self, timeout: i32) -> Self {
            self.options.timeout = Some(timeout);
            self
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for BlobContainerGetPropertiesOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct BlobContainerListBlobFlatSegmentOptionsBuilder<'a> {
        options: BlobContainerListBlobFlatSegmentOptions<'a>,
    }

    impl BlobContainerListBlobFlatSegmentOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: BlobContainerListBlobFlatSegmentOptions::default(),
            }
        }

        pub fn build(&self) -> BlobContainerListBlobFlatSegmentOptions {
            self.options.clone()
        }

        pub fn with_include(mut self, include: Vec<ListBlobsIncludes>) -> Self {
            self.options.include = Some(include);
            self
        }

        pub fn with_marker(mut self, marker: String) -> Self {
            self.options.marker = Some(marker);
            self
        }

        pub fn with_maxresults(mut self, maxresults: i32) -> Self {
            self.options.maxresults = Some(maxresults);
            self
        }

        pub fn with_prefix(mut self, prefix: String) -> Self {
            self.options.prefix = Some(prefix);
            self
        }

        pub fn with_request_id(mut self, request_id: String) -> Self {
            self.options.request_id = Some(request_id);
            self
        }

        pub fn with_timeout(mut self, timeout: i32) -> Self {
            self.options.timeout = Some(timeout);
            self
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for BlobContainerListBlobFlatSegmentOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct BlobContainerListBlobHierarchySegmentOptionsBuilder<'a> {
        options: BlobContainerListBlobHierarchySegmentOptions<'a>,
    }

    impl BlobContainerListBlobHierarchySegmentOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: BlobContainerListBlobHierarchySegmentOptions::default(),
            }
        }

        pub fn build(&self) -> BlobContainerListBlobHierarchySegmentOptions {
            self.options.clone()
        }

        pub fn with_include(mut self, include: Vec<ListBlobsIncludes>) -> Self {
            self.options.include = Some(include);
            self
        }

        pub fn with_marker(mut self, marker: String) -> Self {
            self.options.marker = Some(marker);
            self
        }

        pub fn with_maxresults(mut self, maxresults: i32) -> Self {
            self.options.maxresults = Some(maxresults);
            self
        }

        pub fn with_prefix(mut self, prefix: String) -> Self {
            self.options.prefix = Some(prefix);
            self
        }

        pub fn with_request_id(mut self, request_id: String) -> Self {
            self.options.request_id = Some(request_id);
            self
        }

        pub fn with_timeout(mut self, timeout: i32) -> Self {
            self.options.timeout = Some(timeout);
            self
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a>
        for BlobContainerListBlobHierarchySegmentOptionsBuilder<'a>
    {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct BlobContainerReleaseLeaseOptionsBuilder<'a> {
        options: BlobContainerReleaseLeaseOptions<'a>,
    }

    impl BlobContainerReleaseLeaseOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: BlobContainerReleaseLeaseOptions::default(),
            }
        }

        pub fn build(&self) -> BlobContainerReleaseLeaseOptions {
            self.options.clone()
        }

        pub fn with_if_modified_since(mut self, if_modified_since: OffsetDateTime) -> Self {
            self.options.if_modified_since = Some(if_modified_since);
            self
        }

        pub fn with_if_unmodified_since(mut self, if_unmodified_since: OffsetDateTime) -> Self {
            self.options.if_unmodified_since = Some(if_unmodified_since);
            self
        }

        pub fn with_request_id(mut self, request_id: String) -> Self {
            self.options.request_id = Some(request_id);
            self
        }

        pub fn with_timeout(mut self, timeout: i32) -> Self {
            self.options.timeout = Some(timeout);
            self
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for BlobContainerReleaseLeaseOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct BlobContainerRenameOptionsBuilder<'a> {
        options: BlobContainerRenameOptions<'a>,
    }

    impl BlobContainerRenameOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: BlobContainerRenameOptions::default(),
            }
        }

        pub fn build(&self) -> BlobContainerRenameOptions {
            self.options.clone()
        }

        pub fn with_request_id(mut self, request_id: String) -> Self {
            self.options.request_id = Some(request_id);
            self
        }

        pub fn with_source_lease_id(mut self, source_lease_id: String) -> Self {
            self.options.source_lease_id = Some(source_lease_id);
            self
        }

        pub fn with_timeout(mut self, timeout: i32) -> Self {
            self.options.timeout = Some(timeout);
            self
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for BlobContainerRenameOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct BlobContainerRenewLeaseOptionsBuilder<'a> {
        options: BlobContainerRenewLeaseOptions<'a>,
    }

    impl BlobContainerRenewLeaseOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: BlobContainerRenewLeaseOptions::default(),
            }
        }

        pub fn build(&self) -> BlobContainerRenewLeaseOptions {
            self.options.clone()
        }

        pub fn with_if_modified_since(mut self, if_modified_since: OffsetDateTime) -> Self {
            self.options.if_modified_since = Some(if_modified_since);
            self
        }

        pub fn with_if_unmodified_since(mut self, if_unmodified_since: OffsetDateTime) -> Self {
            self.options.if_unmodified_since = Some(if_unmodified_since);
            self
        }

        pub fn with_request_id(mut self, request_id: String) -> Self {
            self.options.request_id = Some(request_id);
            self
        }

        pub fn with_timeout(mut self, timeout: i32) -> Self {
            self.options.timeout = Some(timeout);
            self
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for BlobContainerRenewLeaseOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct BlobContainerSetAccessPolicyOptionsBuilder<'a> {
        options: BlobContainerSetAccessPolicyOptions<'a>,
    }

    impl BlobContainerSetAccessPolicyOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: BlobContainerSetAccessPolicyOptions::default(),
            }
        }

        pub fn build(&self) -> BlobContainerSetAccessPolicyOptions {
            self.options.clone()
        }

        pub fn with_if_modified_since(mut self, if_modified_since: OffsetDateTime) -> Self {
            self.options.if_modified_since = Some(if_modified_since);
            self
        }

        pub fn with_if_unmodified_since(mut self, if_unmodified_since: OffsetDateTime) -> Self {
            self.options.if_unmodified_since = Some(if_unmodified_since);
            self
        }

        pub fn with_lease_id(mut self, lease_id: String) -> Self {
            self.options.lease_id = Some(lease_id);
            self
        }

        pub fn with_request_id(mut self, request_id: String) -> Self {
            self.options.request_id = Some(request_id);
            self
        }

        pub fn with_timeout(mut self, timeout: i32) -> Self {
            self.options.timeout = Some(timeout);
            self
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for BlobContainerSetAccessPolicyOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct BlobContainerSetMetadataOptionsBuilder<'a> {
        options: BlobContainerSetMetadataOptions<'a>,
    }

    impl BlobContainerSetMetadataOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: BlobContainerSetMetadataOptions::default(),
            }
        }

        pub fn build(&self) -> BlobContainerSetMetadataOptions {
            self.options.clone()
        }

        pub fn with_if_modified_since(mut self, if_modified_since: OffsetDateTime) -> Self {
            self.options.if_modified_since = Some(if_modified_since);
            self
        }

        pub fn with_lease_id(mut self, lease_id: String) -> Self {
            self.options.lease_id = Some(lease_id);
            self
        }

        pub fn with_request_id(mut self, request_id: String) -> Self {
            self.options.request_id = Some(request_id);
            self
        }

        pub fn with_timeout(mut self, timeout: i32) -> Self {
            self.options.timeout = Some(timeout);
            self
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for BlobContainerSetMetadataOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct BlobContainerSubmitBatchOptionsBuilder<'a> {
        options: BlobContainerSubmitBatchOptions<'a>,
    }

    impl BlobContainerSubmitBatchOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: BlobContainerSubmitBatchOptions::default(),
            }
        }

        pub fn build(&self) -> BlobContainerSubmitBatchOptions {
            self.options.clone()
        }

        pub fn with_request_id(mut self, request_id: String) -> Self {
            self.options.request_id = Some(request_id);
            self
        }

        pub fn with_timeout(mut self, timeout: i32) -> Self {
            self.options.timeout = Some(timeout);
            self
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for BlobContainerSubmitBatchOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct BlobContainerUndeleteOptionsBuilder<'a> {
        options: BlobContainerUndeleteOptions<'a>,
    }

    impl BlobContainerUndeleteOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: BlobContainerUndeleteOptions::default(),
            }
        }

        pub fn build(&self) -> BlobContainerUndeleteOptions {
            self.options.clone()
        }

        pub fn with_deleted_container_name(mut self, deleted_container_name: String) -> Self {
            self.options.deleted_container_name = Some(deleted_container_name);
            self
        }

        pub fn with_deleted_container_version(mut self, deleted_container_version: String) -> Self {
            self.options.deleted_container_version = Some(deleted_container_version);
            self
        }

        pub fn with_request_id(mut self, request_id: String) -> Self {
            self.options.request_id = Some(request_id);
            self
        }

        pub fn with_timeout(mut self, timeout: i32) -> Self {
            self.options.timeout = Some(timeout);
            self
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for BlobContainerUndeleteOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }
}
