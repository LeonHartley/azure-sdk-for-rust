// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use crate::models::BlobImmutabilityPolicyMode;
use azure_core::builders::ClientMethodOptionsBuilder;
use azure_core::{
    AsClientMethodOptions, ClientMethodOptions, Context, Method, Pipeline, Request, RequestContent,
    Response, Result, Url,
};
use time::OffsetDateTime;

pub struct BlobAppendBlob {
    pub(in crate::generated::clients) endpoint: Url,
    pub(in crate::generated::clients) pipeline: Pipeline,
}

impl BlobAppendBlob {
    /// The Append Block operation commits a new block of data to the end of an append blob.
    pub async fn append_block(
        &self,
        body: RequestContent<Vec<u8>>,
        container_name: impl Into<String>,
        blob: impl Into<String>,
        content_length: i64,
        max_size: i64,
        append_position: i64,
        version: impl Into<String>,
        options: Option<BlobAppendBlobAppendBlockOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        let mut path = String::from(
            "/{containerName}/{blob}?AppendBlob/{containerName}/{blob}?comp=appendblock",
        );
        path = path.replace("{blob}", &blob.into());
        path = path.replace("{containerName}", &container_name.into());
        url.set_path(&path);
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        request.insert_header("content-length", content_length.to_string());
        if let Some(transactional_content_md5) = options.transactional_content_md5 {
            request.insert_header("content-md5", transactional_content_md5);
        }
        request.insert_header("content-type", "application/json");
        if let Some(if_match) = options.if_match {
            request.insert_header("if-match", if_match);
        }
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", if_modified_since.to_string());
        }
        if let Some(if_none_match) = options.if_none_match {
            request.insert_header("if-none-match", if_none_match);
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", if_unmodified_since.to_string());
        }
        request.insert_header("x-ms-blob-condition-appendpos", append_position.to_string());
        request.insert_header("x-ms-blob-condition-maxsize", max_size.to_string());
        if let Some(request_id) = options.request_id {
            request.insert_header("x-ms-client-request-id", request_id);
        }
        if let Some(transactional_content_crc64) = options.transactional_content_crc64 {
            request.insert_header("x-ms-content-crc64", transactional_content_crc64);
        }
        if let Some(encryption_algorithm) = options.encryption_algorithm {
            request.insert_header("x-ms-encryption-algorithm", encryption_algorithm);
        }
        if let Some(encryption_key) = options.encryption_key {
            request.insert_header("x-ms-encryption-key", encryption_key);
        }
        if let Some(encryption_key_sha256) = options.encryption_key_sha256 {
            request.insert_header("x-ms-encryption-key-sha256", encryption_key_sha256);
        }
        if let Some(encryption_scope) = options.encryption_scope {
            request.insert_header("x-ms-encryption-scope", encryption_scope);
        }
        if let Some(if_tags) = options.if_tags {
            request.insert_header("x-ms-if-tags", if_tags);
        }
        if let Some(lease_id) = options.lease_id {
            request.insert_header("x-ms-lease-id", lease_id);
        }
        request.insert_header("x-ms-version", version.into());
        request.set_body(body);
        self.pipeline.send(&mut ctx, &mut request).await
    }

    /// The Append Block From URL operation creates a new block to be committed as part of an append blob where the contents are
    /// read from a URL.
    pub async fn append_block_from_url(
        &self,
        container_name: impl Into<String>,
        blob: impl Into<String>,
        content_length: i64,
        source_url: impl Into<String>,
        source_range: impl Into<String>,
        max_size: i64,
        append_position: i64,
        version: impl Into<String>,
        options: Option<BlobAppendBlobAppendBlockFromUrlOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        let mut path = String::from(
            "/{containerName}/{blob}?AppendBlob/{containerName}/{blob}?comp=appendblock&fromUrl",
        );
        path = path.replace("{blob}", &blob.into());
        path = path.replace("{containerName}", &container_name.into());
        url.set_path(&path);
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        request.insert_header("content-length", content_length.to_string());
        if let Some(if_match) = options.if_match {
            request.insert_header("if-match", if_match);
        }
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", if_modified_since.to_string());
        }
        if let Some(if_none_match) = options.if_none_match {
            request.insert_header("if-none-match", if_none_match);
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", if_unmodified_since.to_string());
        }
        request.insert_header("x-ms-blob-condition-appendpos", append_position.to_string());
        request.insert_header("x-ms-blob-condition-maxsize", max_size.to_string());
        if let Some(request_id) = options.request_id {
            request.insert_header("x-ms-client-request-id", request_id);
        }
        if let Some(copy_source_authorization) = options.copy_source_authorization {
            request.insert_header("x-ms-copy-source-authorization", copy_source_authorization);
        }
        if let Some(encryption_algorithm) = options.encryption_algorithm {
            request.insert_header("x-ms-encryption-algorithm", encryption_algorithm);
        }
        if let Some(encryption_key) = options.encryption_key {
            request.insert_header("x-ms-encryption-key", encryption_key);
        }
        if let Some(encryption_key_sha256) = options.encryption_key_sha256 {
            request.insert_header("x-ms-encryption-key-sha256", encryption_key_sha256);
        }
        if let Some(encryption_scope) = options.encryption_scope {
            request.insert_header("x-ms-encryption-scope", encryption_scope);
        }
        if let Some(if_tags) = options.if_tags {
            request.insert_header("x-ms-if-tags", if_tags);
        }
        if let Some(lease_id) = options.lease_id {
            request.insert_header("x-ms-lease-id", lease_id);
        }
        if let Some(source_content_crc64) = options.source_content_crc64 {
            request.insert_header("x-ms-source-content-crc64", source_content_crc64);
        }
        if let Some(source_content_md5) = options.source_content_md5 {
            request.insert_header("x-ms-source-content-md5", source_content_md5);
        }
        request.insert_header("x-ms-source-range", source_range.into());
        request.insert_header("x-ms-source-url", source_url.into());
        request.insert_header("x-ms-version", version.into());
        self.pipeline.send(&mut ctx, &mut request).await
    }

    /// The Create operation creates a new append blob.
    pub async fn create(
        &self,
        container_name: impl Into<String>,
        blob: impl Into<String>,
        content_length: i64,
        version: impl Into<String>,
        options: Option<BlobAppendBlobCreateOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        let mut path = String::from("/{containerName}/{blob}?AppendBlob");
        path = path.replace("{blob}", &blob.into());
        path = path.replace("{containerName}", &container_name.into());
        url.set_path(&path);
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        request.insert_header("content-length", content_length.to_string());
        if let Some(if_match) = options.if_match {
            request.insert_header("if-match", if_match);
        }
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", if_modified_since.to_string());
        }
        if let Some(if_none_match) = options.if_none_match {
            request.insert_header("if-none-match", if_none_match);
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", if_unmodified_since.to_string());
        }
        if let Some(blob_cache_control) = options.blob_cache_control {
            request.insert_header("x-ms-blob-cache-control", blob_cache_control);
        }
        if let Some(blob_content_disposition) = options.blob_content_disposition {
            request.insert_header("x-ms-blob-content-disposition", blob_content_disposition);
        }
        if let Some(blob_content_encoding) = options.blob_content_encoding {
            request.insert_header("x-ms-blob-content-encoding", blob_content_encoding);
        }
        if let Some(blob_content_language) = options.blob_content_language {
            request.insert_header("x-ms-blob-content-language", blob_content_language);
        }
        if let Some(blob_content_md5) = options.blob_content_md5 {
            request.insert_header("x-ms-blob-content-md5", blob_content_md5);
        }
        if let Some(blob_content_type) = options.blob_content_type {
            request.insert_header("x-ms-blob-content-type", blob_content_type);
        }
        if let Some(request_id) = options.request_id {
            request.insert_header("x-ms-client-request-id", request_id);
        }
        if let Some(encryption_algorithm) = options.encryption_algorithm {
            request.insert_header("x-ms-encryption-algorithm", encryption_algorithm);
        }
        if let Some(encryption_key) = options.encryption_key {
            request.insert_header("x-ms-encryption-key", encryption_key);
        }
        if let Some(encryption_key_sha256) = options.encryption_key_sha256 {
            request.insert_header("x-ms-encryption-key-sha256", encryption_key_sha256);
        }
        if let Some(encryption_scope) = options.encryption_scope {
            request.insert_header("x-ms-encryption-scope", encryption_scope);
        }
        if let Some(if_tags) = options.if_tags {
            request.insert_header("x-ms-if-tags", if_tags);
        }
        if let Some(immutability_policy_mode) = options.immutability_policy_mode {
            request.insert_header(
                "x-ms-immutability-policy-mode",
                immutability_policy_mode.to_string(),
            );
        }
        if let Some(immutability_policy_expiry) = options.immutability_policy_expiry {
            request.insert_header(
                "x-ms-immutability-policy-until-date",
                immutability_policy_expiry,
            );
        }
        if let Some(lease_id) = options.lease_id {
            request.insert_header("x-ms-lease-id", lease_id);
        }
        if let Some(legal_hold) = options.legal_hold {
            request.insert_header("x-ms-legal-hold", legal_hold.to_string());
        }
        if let Some(blob_tags_string) = options.blob_tags_string {
            request.insert_header("x-ms-tags", blob_tags_string);
        }
        request.insert_header("x-ms-version", version.into());
        self.pipeline.send(&mut ctx, &mut request).await
    }

    /// The Seal operation seals the Append Blob to make it read-only. Seal is supported only on version 2019-12-12 version or
    /// later.
    pub async fn seal(
        &self,
        container_name: impl Into<String>,
        blob: impl Into<String>,
        append_position: i64,
        version: impl Into<String>,
        options: Option<BlobAppendBlobSealOptions<'_>>,
    ) -> Result<Response<()>> {
        let options = options.unwrap_or_default();
        let mut ctx = options.method_options.context();
        let mut url = self.endpoint.clone();
        let mut path =
            String::from("/{containerName}/{blob}?AppendBlob/{containerName}/{blob}?comp=seal");
        path = path.replace("{blob}", &blob.into());
        path = path.replace("{containerName}", &container_name.into());
        url.set_path(&path);
        if let Some(timeout) = options.timeout {
            url.query_pairs_mut()
                .append_pair("timeout", &timeout.to_string());
        }
        let mut request = Request::new(url, Method::Put);
        request.insert_header("accept", "application/json");
        if let Some(if_match) = options.if_match {
            request.insert_header("if-match", if_match);
        }
        if let Some(if_modified_since) = options.if_modified_since {
            request.insert_header("if-modified-since", if_modified_since.to_string());
        }
        if let Some(if_none_match) = options.if_none_match {
            request.insert_header("if-none-match", if_none_match);
        }
        if let Some(if_unmodified_since) = options.if_unmodified_since {
            request.insert_header("if-unmodified-since", if_unmodified_since.to_string());
        }
        request.insert_header("x-ms-blob-condition-appendpos", append_position.to_string());
        if let Some(request_id) = options.request_id {
            request.insert_header("x-ms-client-request-id", request_id);
        }
        if let Some(if_tags) = options.if_tags {
            request.insert_header("x-ms-if-tags", if_tags);
        }
        if let Some(lease_id) = options.lease_id {
            request.insert_header("x-ms-lease-id", lease_id);
        }
        request.insert_header("x-ms-version", version.into());
        self.pipeline.send(&mut ctx, &mut request).await
    }
}

#[derive(Clone, Debug, Default)]
pub struct BlobAppendBlobAppendBlockOptions<'a> {
    encryption_algorithm: Option<String>,
    encryption_key: Option<String>,
    encryption_key_sha256: Option<String>,
    encryption_scope: Option<String>,
    if_match: Option<String>,
    if_modified_since: Option<OffsetDateTime>,
    if_none_match: Option<String>,
    if_tags: Option<String>,
    if_unmodified_since: Option<OffsetDateTime>,
    lease_id: Option<String>,
    method_options: ClientMethodOptions<'a>,
    request_id: Option<String>,
    timeout: Option<i32>,
    transactional_content_crc64: Option<String>,
    transactional_content_md5: Option<String>,
}

impl<'a> BlobAppendBlobAppendBlockOptions<'a> {
    pub fn builder() -> builders::BlobAppendBlobAppendBlockOptionsBuilder<'a> {
        builders::BlobAppendBlobAppendBlockOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct BlobAppendBlobAppendBlockFromUrlOptions<'a> {
    copy_source_authorization: Option<String>,
    encryption_algorithm: Option<String>,
    encryption_key: Option<String>,
    encryption_key_sha256: Option<String>,
    encryption_scope: Option<String>,
    if_match: Option<String>,
    if_modified_since: Option<OffsetDateTime>,
    if_none_match: Option<String>,
    if_tags: Option<String>,
    if_unmodified_since: Option<OffsetDateTime>,
    lease_id: Option<String>,
    method_options: ClientMethodOptions<'a>,
    request_id: Option<String>,
    source_content_crc64: Option<String>,
    source_content_md5: Option<String>,
    timeout: Option<i32>,
}

impl<'a> BlobAppendBlobAppendBlockFromUrlOptions<'a> {
    pub fn builder() -> builders::BlobAppendBlobAppendBlockFromUrlOptionsBuilder<'a> {
        builders::BlobAppendBlobAppendBlockFromUrlOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct BlobAppendBlobCreateOptions<'a> {
    blob_cache_control: Option<String>,
    blob_content_disposition: Option<String>,
    blob_content_encoding: Option<String>,
    blob_content_language: Option<String>,
    blob_content_md5: Option<String>,
    blob_content_type: Option<String>,
    blob_tags_string: Option<String>,
    encryption_algorithm: Option<String>,
    encryption_key: Option<String>,
    encryption_key_sha256: Option<String>,
    encryption_scope: Option<String>,
    if_match: Option<String>,
    if_modified_since: Option<OffsetDateTime>,
    if_none_match: Option<String>,
    if_tags: Option<String>,
    if_unmodified_since: Option<OffsetDateTime>,
    immutability_policy_expiry: Option<String>,
    immutability_policy_mode: Option<BlobImmutabilityPolicyMode>,
    lease_id: Option<String>,
    legal_hold: Option<bool>,
    method_options: ClientMethodOptions<'a>,
    request_id: Option<String>,
    timeout: Option<i32>,
}

impl<'a> BlobAppendBlobCreateOptions<'a> {
    pub fn builder() -> builders::BlobAppendBlobCreateOptionsBuilder<'a> {
        builders::BlobAppendBlobCreateOptionsBuilder::new()
    }
}

#[derive(Clone, Debug, Default)]
pub struct BlobAppendBlobSealOptions<'a> {
    if_match: Option<String>,
    if_modified_since: Option<OffsetDateTime>,
    if_none_match: Option<String>,
    if_tags: Option<String>,
    if_unmodified_since: Option<OffsetDateTime>,
    lease_id: Option<String>,
    method_options: ClientMethodOptions<'a>,
    request_id: Option<String>,
    timeout: Option<i32>,
}

impl<'a> BlobAppendBlobSealOptions<'a> {
    pub fn builder() -> builders::BlobAppendBlobSealOptionsBuilder<'a> {
        builders::BlobAppendBlobSealOptionsBuilder::new()
    }
}

pub mod builders {
    use super::*;

    pub struct BlobAppendBlobAppendBlockOptionsBuilder<'a> {
        options: BlobAppendBlobAppendBlockOptions<'a>,
    }

    impl BlobAppendBlobAppendBlockOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: BlobAppendBlobAppendBlockOptions::default(),
            }
        }

        pub fn build(&self) -> BlobAppendBlobAppendBlockOptions {
            self.options.clone()
        }

        pub fn with_encryption_algorithm(mut self, encryption_algorithm: String) -> Self {
            self.options.encryption_algorithm = Some(encryption_algorithm);
            self
        }

        pub fn with_encryption_key(mut self, encryption_key: String) -> Self {
            self.options.encryption_key = Some(encryption_key);
            self
        }

        pub fn with_encryption_key_sha256(mut self, encryption_key_sha256: String) -> Self {
            self.options.encryption_key_sha256 = Some(encryption_key_sha256);
            self
        }

        pub fn with_encryption_scope(mut self, encryption_scope: String) -> Self {
            self.options.encryption_scope = Some(encryption_scope);
            self
        }

        pub fn with_if_match(mut self, if_match: String) -> Self {
            self.options.if_match = Some(if_match);
            self
        }

        pub fn with_if_modified_since(mut self, if_modified_since: OffsetDateTime) -> Self {
            self.options.if_modified_since = Some(if_modified_since);
            self
        }

        pub fn with_if_none_match(mut self, if_none_match: String) -> Self {
            self.options.if_none_match = Some(if_none_match);
            self
        }

        pub fn with_if_tags(mut self, if_tags: String) -> Self {
            self.options.if_tags = Some(if_tags);
            self
        }

        pub fn with_if_unmodified_since(mut self, if_unmodified_since: OffsetDateTime) -> Self {
            self.options.if_unmodified_since = Some(if_unmodified_since);
            self
        }

        pub fn with_lease_id(mut self, lease_id: String) -> Self {
            self.options.lease_id = Some(lease_id);
            self
        }

        pub fn with_request_id(mut self, request_id: String) -> Self {
            self.options.request_id = Some(request_id);
            self
        }

        pub fn with_timeout(mut self, timeout: i32) -> Self {
            self.options.timeout = Some(timeout);
            self
        }

        pub fn with_transactional_content_crc64(
            mut self,
            transactional_content_crc64: String,
        ) -> Self {
            self.options.transactional_content_crc64 = Some(transactional_content_crc64);
            self
        }

        pub fn with_transactional_content_md5(mut self, transactional_content_md5: String) -> Self {
            self.options.transactional_content_md5 = Some(transactional_content_md5);
            self
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for BlobAppendBlobAppendBlockOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct BlobAppendBlobAppendBlockFromUrlOptionsBuilder<'a> {
        options: BlobAppendBlobAppendBlockFromUrlOptions<'a>,
    }

    impl BlobAppendBlobAppendBlockFromUrlOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: BlobAppendBlobAppendBlockFromUrlOptions::default(),
            }
        }

        pub fn build(&self) -> BlobAppendBlobAppendBlockFromUrlOptions {
            self.options.clone()
        }

        pub fn with_copy_source_authorization(mut self, copy_source_authorization: String) -> Self {
            self.options.copy_source_authorization = Some(copy_source_authorization);
            self
        }

        pub fn with_encryption_algorithm(mut self, encryption_algorithm: String) -> Self {
            self.options.encryption_algorithm = Some(encryption_algorithm);
            self
        }

        pub fn with_encryption_key(mut self, encryption_key: String) -> Self {
            self.options.encryption_key = Some(encryption_key);
            self
        }

        pub fn with_encryption_key_sha256(mut self, encryption_key_sha256: String) -> Self {
            self.options.encryption_key_sha256 = Some(encryption_key_sha256);
            self
        }

        pub fn with_encryption_scope(mut self, encryption_scope: String) -> Self {
            self.options.encryption_scope = Some(encryption_scope);
            self
        }

        pub fn with_if_match(mut self, if_match: String) -> Self {
            self.options.if_match = Some(if_match);
            self
        }

        pub fn with_if_modified_since(mut self, if_modified_since: OffsetDateTime) -> Self {
            self.options.if_modified_since = Some(if_modified_since);
            self
        }

        pub fn with_if_none_match(mut self, if_none_match: String) -> Self {
            self.options.if_none_match = Some(if_none_match);
            self
        }

        pub fn with_if_tags(mut self, if_tags: String) -> Self {
            self.options.if_tags = Some(if_tags);
            self
        }

        pub fn with_if_unmodified_since(mut self, if_unmodified_since: OffsetDateTime) -> Self {
            self.options.if_unmodified_since = Some(if_unmodified_since);
            self
        }

        pub fn with_lease_id(mut self, lease_id: String) -> Self {
            self.options.lease_id = Some(lease_id);
            self
        }

        pub fn with_request_id(mut self, request_id: String) -> Self {
            self.options.request_id = Some(request_id);
            self
        }

        pub fn with_source_content_crc64(mut self, source_content_crc64: String) -> Self {
            self.options.source_content_crc64 = Some(source_content_crc64);
            self
        }

        pub fn with_source_content_md5(mut self, source_content_md5: String) -> Self {
            self.options.source_content_md5 = Some(source_content_md5);
            self
        }

        pub fn with_timeout(mut self, timeout: i32) -> Self {
            self.options.timeout = Some(timeout);
            self
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for BlobAppendBlobAppendBlockFromUrlOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct BlobAppendBlobCreateOptionsBuilder<'a> {
        options: BlobAppendBlobCreateOptions<'a>,
    }

    impl BlobAppendBlobCreateOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: BlobAppendBlobCreateOptions::default(),
            }
        }

        pub fn build(&self) -> BlobAppendBlobCreateOptions {
            self.options.clone()
        }

        pub fn with_blob_cache_control(mut self, blob_cache_control: String) -> Self {
            self.options.blob_cache_control = Some(blob_cache_control);
            self
        }

        pub fn with_blob_content_disposition(mut self, blob_content_disposition: String) -> Self {
            self.options.blob_content_disposition = Some(blob_content_disposition);
            self
        }

        pub fn with_blob_content_encoding(mut self, blob_content_encoding: String) -> Self {
            self.options.blob_content_encoding = Some(blob_content_encoding);
            self
        }

        pub fn with_blob_content_language(mut self, blob_content_language: String) -> Self {
            self.options.blob_content_language = Some(blob_content_language);
            self
        }

        pub fn with_blob_content_md5(mut self, blob_content_md5: String) -> Self {
            self.options.blob_content_md5 = Some(blob_content_md5);
            self
        }

        pub fn with_blob_content_type(mut self, blob_content_type: String) -> Self {
            self.options.blob_content_type = Some(blob_content_type);
            self
        }

        pub fn with_blob_tags_string(mut self, blob_tags_string: String) -> Self {
            self.options.blob_tags_string = Some(blob_tags_string);
            self
        }

        pub fn with_encryption_algorithm(mut self, encryption_algorithm: String) -> Self {
            self.options.encryption_algorithm = Some(encryption_algorithm);
            self
        }

        pub fn with_encryption_key(mut self, encryption_key: String) -> Self {
            self.options.encryption_key = Some(encryption_key);
            self
        }

        pub fn with_encryption_key_sha256(mut self, encryption_key_sha256: String) -> Self {
            self.options.encryption_key_sha256 = Some(encryption_key_sha256);
            self
        }

        pub fn with_encryption_scope(mut self, encryption_scope: String) -> Self {
            self.options.encryption_scope = Some(encryption_scope);
            self
        }

        pub fn with_if_match(mut self, if_match: String) -> Self {
            self.options.if_match = Some(if_match);
            self
        }

        pub fn with_if_modified_since(mut self, if_modified_since: OffsetDateTime) -> Self {
            self.options.if_modified_since = Some(if_modified_since);
            self
        }

        pub fn with_if_none_match(mut self, if_none_match: String) -> Self {
            self.options.if_none_match = Some(if_none_match);
            self
        }

        pub fn with_if_tags(mut self, if_tags: String) -> Self {
            self.options.if_tags = Some(if_tags);
            self
        }

        pub fn with_if_unmodified_since(mut self, if_unmodified_since: OffsetDateTime) -> Self {
            self.options.if_unmodified_since = Some(if_unmodified_since);
            self
        }

        pub fn with_immutability_policy_expiry(
            mut self,
            immutability_policy_expiry: String,
        ) -> Self {
            self.options.immutability_policy_expiry = Some(immutability_policy_expiry);
            self
        }

        pub fn with_immutability_policy_mode(
            mut self,
            immutability_policy_mode: BlobImmutabilityPolicyMode,
        ) -> Self {
            self.options.immutability_policy_mode = Some(immutability_policy_mode);
            self
        }

        pub fn with_lease_id(mut self, lease_id: String) -> Self {
            self.options.lease_id = Some(lease_id);
            self
        }

        pub fn with_legal_hold(mut self, legal_hold: bool) -> Self {
            self.options.legal_hold = Some(legal_hold);
            self
        }

        pub fn with_request_id(mut self, request_id: String) -> Self {
            self.options.request_id = Some(request_id);
            self
        }

        pub fn with_timeout(mut self, timeout: i32) -> Self {
            self.options.timeout = Some(timeout);
            self
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for BlobAppendBlobCreateOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }

    pub struct BlobAppendBlobSealOptionsBuilder<'a> {
        options: BlobAppendBlobSealOptions<'a>,
    }

    impl BlobAppendBlobSealOptionsBuilder<'_> {
        pub(super) fn new() -> Self {
            Self {
                options: BlobAppendBlobSealOptions::default(),
            }
        }

        pub fn build(&self) -> BlobAppendBlobSealOptions {
            self.options.clone()
        }

        pub fn with_if_match(mut self, if_match: String) -> Self {
            self.options.if_match = Some(if_match);
            self
        }

        pub fn with_if_modified_since(mut self, if_modified_since: OffsetDateTime) -> Self {
            self.options.if_modified_since = Some(if_modified_since);
            self
        }

        pub fn with_if_none_match(mut self, if_none_match: String) -> Self {
            self.options.if_none_match = Some(if_none_match);
            self
        }

        pub fn with_if_tags(mut self, if_tags: String) -> Self {
            self.options.if_tags = Some(if_tags);
            self
        }

        pub fn with_if_unmodified_since(mut self, if_unmodified_since: OffsetDateTime) -> Self {
            self.options.if_unmodified_since = Some(if_unmodified_since);
            self
        }

        pub fn with_lease_id(mut self, lease_id: String) -> Self {
            self.options.lease_id = Some(lease_id);
            self
        }

        pub fn with_request_id(mut self, request_id: String) -> Self {
            self.options.request_id = Some(request_id);
            self
        }

        pub fn with_timeout(mut self, timeout: i32) -> Self {
            self.options.timeout = Some(timeout);
            self
        }
    }

    impl<'a> ClientMethodOptionsBuilder<'a> for BlobAppendBlobSealOptionsBuilder<'a> {
        fn with_context(mut self, context: &'a Context) -> Self {
            self.options.method_options.set_context(context);
            self
        }
    }
}
